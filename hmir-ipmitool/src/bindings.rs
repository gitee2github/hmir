/* automatically generated by rust-bindgen 0.61.0 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __time_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub __pad5: usize,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    const UNINIT: ::std::mem::MaybeUninit<_IO_FILE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_IO_FILE>(),
        216usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_read_ptr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_read_end) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_read_base) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_write_base) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_write_ptr) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_write_end) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_buf_base) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_buf_end) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_save_base) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_backup_base) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_backup_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_save_end) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._markers) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_markers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._chain) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_chain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._fileno) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_fileno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._flags2) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._old_offset) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_old_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._cur_column) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_cur_column)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._vtable_offset) as usize - ptr as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_vtable_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._shortbuf) as usize - ptr as usize },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_shortbuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._lock) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._offset) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._codecvt) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_codecvt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._wide_data) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_wide_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._freeres_list) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_list)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._freeres_buf) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad5) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._mode) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._unused2) as usize - ptr as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_unused2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipmi_cfgp_action {
    pub type_: ::std::os::raw::c_int,
    pub set: ::std::os::raw::c_int,
    pub block: ::std::os::raw::c_int,
    pub quiet: ::std::os::raw::c_int,
    pub argc: ::std::os::raw::c_int,
    pub argv: *mut *const ::std::os::raw::c_char,
    pub file: *mut FILE,
}
#[test]
fn bindgen_test_layout_ipmi_cfgp_action() {
    const UNINIT: ::std::mem::MaybeUninit<ipmi_cfgp_action> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ipmi_cfgp_action>(),
        40usize,
        concat!("Size of: ", stringify!(ipmi_cfgp_action))
    );
    assert_eq!(
        ::std::mem::align_of::<ipmi_cfgp_action>(),
        8usize,
        concat!("Alignment of ", stringify!(ipmi_cfgp_action))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_cfgp_action),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).set) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_cfgp_action),
            "::",
            stringify!(set)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).block) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_cfgp_action),
            "::",
            stringify!(block)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quiet) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_cfgp_action),
            "::",
            stringify!(quiet)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).argc) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_cfgp_action),
            "::",
            stringify!(argc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).argv) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_cfgp_action),
            "::",
            stringify!(argv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).file) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_cfgp_action),
            "::",
            stringify!(file)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipmi_cfgp {
    pub name: *const ::std::os::raw::c_char,
    pub format: *const ::std::os::raw::c_char,
    pub size: ::std::os::raw::c_uint,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub specific: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ipmi_cfgp() {
    const UNINIT: ::std::mem::MaybeUninit<ipmi_cfgp> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ipmi_cfgp>(),
        32usize,
        concat!("Size of: ", stringify!(ipmi_cfgp))
    );
    assert_eq!(
        ::std::mem::align_of::<ipmi_cfgp>(),
        8usize,
        concat!("Alignment of ", stringify!(ipmi_cfgp))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_cfgp),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_cfgp),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_cfgp),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).specific) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_cfgp),
            "::",
            stringify!(specific)
        )
    );
}
impl ipmi_cfgp {
    #[inline]
    pub fn access(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_access(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn is_set(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_set(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn first_set(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_first_set(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn has_blocks(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_has_blocks(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn first_block(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_first_block(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        access: ::std::os::raw::c_uint,
        is_set: ::std::os::raw::c_uint,
        first_set: ::std::os::raw::c_uint,
        has_blocks: ::std::os::raw::c_uint,
        first_block: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let access: u32 = unsafe { ::std::mem::transmute(access) };
            access as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let is_set: u32 = unsafe { ::std::mem::transmute(is_set) };
            is_set as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let first_set: u32 = unsafe { ::std::mem::transmute(first_set) };
            first_set as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let has_blocks: u32 = unsafe { ::std::mem::transmute(has_blocks) };
            has_blocks as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let first_block: u32 = unsafe { ::std::mem::transmute(first_block) };
            first_block as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type ipmi_cfgp_handler_t =
    ::std::option::Option<
        unsafe extern "C" fn(priv_: *mut ::std::os::raw::c_void,
                             p: *const ipmi_cfgp,
                             action: *const ipmi_cfgp_action,
                             data: *mut ::std::os::raw::c_uchar)
                             -> ::std::os::raw::c_int,
    >;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipmi_cfgp_sel {
    pub param: ::std::os::raw::c_int,
    pub set: ::std::os::raw::c_int,
    pub block: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ipmi_cfgp_sel() {
    const UNINIT: ::std::mem::MaybeUninit<ipmi_cfgp_sel> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ipmi_cfgp_sel>(),
        12usize,
        concat!("Size of: ", stringify!(ipmi_cfgp_sel))
    );
    assert_eq!(
        ::std::mem::align_of::<ipmi_cfgp_sel>(),
        4usize,
        concat!("Alignment of ", stringify!(ipmi_cfgp_sel))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).param) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_cfgp_sel),
            "::",
            stringify!(param)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).set) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_cfgp_sel),
            "::",
            stringify!(set)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).block) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_cfgp_sel),
            "::",
            stringify!(block)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct ipmi_cfgp_data {
    pub next: *mut ipmi_cfgp_data,
    pub sel: ipmi_cfgp_sel,
    pub data: __IncompleteArrayField<::std::os::raw::c_uchar>,
}
#[test]
fn bindgen_test_layout_ipmi_cfgp_data() {
    const UNINIT: ::std::mem::MaybeUninit<ipmi_cfgp_data> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ipmi_cfgp_data>(),
        24usize,
        concat!("Size of: ", stringify!(ipmi_cfgp_data))
    );
    assert_eq!(
        ::std::mem::align_of::<ipmi_cfgp_data>(),
        8usize,
        concat!("Alignment of ", stringify!(ipmi_cfgp_data))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_cfgp_data),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sel) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_cfgp_data),
            "::",
            stringify!(sel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_cfgp_data),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipmi_cfgp_ctx {
    pub set: *const ipmi_cfgp,
    pub count: ::std::os::raw::c_int,
    pub handler: ipmi_cfgp_handler_t,
    pub cmdname: *const ::std::os::raw::c_char,
    pub v: *mut ipmi_cfgp_data,
    pub priv_: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_ipmi_cfgp_ctx() {
    const UNINIT: ::std::mem::MaybeUninit<ipmi_cfgp_ctx> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ipmi_cfgp_ctx>(),
        48usize,
        concat!("Size of: ", stringify!(ipmi_cfgp_ctx))
    );
    assert_eq!(
        ::std::mem::align_of::<ipmi_cfgp_ctx>(),
        8usize,
        concat!("Alignment of ", stringify!(ipmi_cfgp_ctx))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).set) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_cfgp_ctx),
            "::",
            stringify!(set)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_cfgp_ctx),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handler) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_cfgp_ctx),
            "::",
            stringify!(handler)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmdname) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_cfgp_ctx),
            "::",
            stringify!(cmdname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_cfgp_ctx),
            "::",
            stringify!(v)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).priv_) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_cfgp_ctx),
            "::",
            stringify!(priv_)
        )
    );
}
extern "C" {
    pub fn ipmi_cfgp_init(
        ctx: *mut ipmi_cfgp_ctx,
        set: *const ipmi_cfgp,
        count: ::std::os::raw::c_uint,
        cmdname: *const ::std::os::raw::c_char,
        handler: ipmi_cfgp_handler_t,
        priv_: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ipmi_cfgp_uninit(ctx: *mut ipmi_cfgp_ctx) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ipmi_cfgp_usage(
        set: *const ipmi_cfgp,
        count: ::std::os::raw::c_int,
        write: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ipmi_cfgp_parse_sel(
        ctx: *mut ipmi_cfgp_ctx,
        argc: ::std::os::raw::c_int,
        argv: *mut *const ::std::os::raw::c_char,
        sel: *mut ipmi_cfgp_sel,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ipmi_cfgp_parse_data(
        ctx: *mut ipmi_cfgp_ctx,
        sel: *const ipmi_cfgp_sel,
        argc: ::std::os::raw::c_int,
        argv: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ipmi_cfgp_get(
        ctx: *mut ipmi_cfgp_ctx,
        sel: *const ipmi_cfgp_sel,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ipmi_cfgp_set(
        ctx: *mut ipmi_cfgp_ctx,
        sel: *const ipmi_cfgp_sel,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ipmi_cfgp_save(
        ctx: *mut ipmi_cfgp_ctx,
        sel: *const ipmi_cfgp_sel,
        file: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ipmi_cfgp_print(
        ctx: *mut ipmi_cfgp_ctx,
        sel: *const ipmi_cfgp_sel,
        file: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
pub type time_t = __time_t;
pub type socklen_t = __socklen_t;
pub type sa_family_t = ::std::os::raw::c_ushort;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_storage {
    pub ss_family: sa_family_t,
    pub __ss_padding: [::std::os::raw::c_char; 118usize],
    pub __ss_align: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_sockaddr_storage() {
    const UNINIT: ::std::mem::MaybeUninit<sockaddr_storage> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sockaddr_storage>(),
        128usize,
        concat!("Size of: ", stringify!(sockaddr_storage))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr_storage>(),
        8usize,
        concat!("Alignment of ", stringify!(sockaddr_storage))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ss_family) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(ss_family)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ss_padding) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(__ss_padding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ss_align) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(__ss_align)
        )
    );
}
extern "C" {
    pub fn ipmi_parse_hex(
        str_: *const ::std::os::raw::c_char,
        out: *mut u8,
        size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ipmi_csum(d: *mut u8, s: ::std::os::raw::c_int) -> u8;
}
extern "C" {
    pub fn ipmi_open_file(
        file: *const ::std::os::raw::c_char,
        rw: ::std::os::raw::c_int,
    ) -> *mut FILE;
}
extern "C" {
    pub fn ipmi_start_daemon(intf: *mut ipmi_intf);
}
extern "C" {
    pub fn ipmi_get_oem_id(intf: *mut ipmi_intf) -> u16;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipmi_rq {
    pub msg: ipmi_rq__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipmi_rq__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub cmd: u8,
    pub target_cmd: u8,
    pub data_len: u16,
    pub data: *mut u8,
}
#[test]
fn bindgen_test_layout_ipmi_rq__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ipmi_rq__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ipmi_rq__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(ipmi_rq__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ipmi_rq__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(ipmi_rq__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmd) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_rq__bindgen_ty_1),
            "::",
            stringify!(cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_cmd) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_rq__bindgen_ty_1),
            "::",
            stringify!(target_cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_len) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_rq__bindgen_ty_1),
            "::",
            stringify!(data_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_rq__bindgen_ty_1),
            "::",
            stringify!(data)
        )
    );
}
impl ipmi_rq__bindgen_ty_1 {
    #[inline]
    pub fn netfn(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 6u8) as u8) }
    }
    #[inline]
    pub fn set_netfn(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn lun(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_lun(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(netfn: u8, lun: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 6u8, {
            let netfn: u8 = unsafe { ::std::mem::transmute(netfn) };
            netfn as u64
        });
        __bindgen_bitfield_unit.set(6usize, 2u8, {
            let lun: u8 = unsafe { ::std::mem::transmute(lun) };
            lun as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_ipmi_rq() {
    const UNINIT: ::std::mem::MaybeUninit<ipmi_rq> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ipmi_rq>(),
        16usize,
        concat!("Size of: ", stringify!(ipmi_rq))
    );
    assert_eq!(
        ::std::mem::align_of::<ipmi_rq>(),
        8usize,
        concat!("Alignment of ", stringify!(ipmi_rq))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_rq),
            "::",
            stringify!(msg)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ipmi_v2_payload {
    pub payload_length: u16,
    pub payload_type: u8,
    pub payload: ipmi_v2_payload__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]pub union ipmi_v2_payload__bindgen_ty_1 { pub ipmi_request : ipmi_v2_payload__bindgen_ty_1__bindgen_ty_1 , pub ipmi_response : ipmi_v2_payload__bindgen_ty_1__bindgen_ty_2 , pub open_session_request : ipmi_v2_payload__bindgen_ty_1__bindgen_ty_3 , pub rakp_1_message : ipmi_v2_payload__bindgen_ty_1__bindgen_ty_4 , pub rakp_2_message : ipmi_v2_payload__bindgen_ty_1__bindgen_ty_5 , pub rakp_3_message : ipmi_v2_payload__bindgen_ty_1__bindgen_ty_6 , pub rakp_4_message : ipmi_v2_payload__bindgen_ty_1__bindgen_ty_7 , pub sol_packet : ipmi_v2_payload__bindgen_ty_1__bindgen_ty_8 , }#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipmi_v2_payload__bindgen_ty_1__bindgen_ty_1 {
    pub rq_seq: u8,
    pub request: *mut ipmi_rq,
}
#[test]
fn bindgen_test_layout_ipmi_v2_payload__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ipmi_v2_payload__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ipmi_v2_payload__bindgen_ty_1__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(ipmi_v2_payload__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ipmi_v2_payload__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(ipmi_v2_payload__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rq_seq) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_v2_payload__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(rq_seq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).request) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_v2_payload__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(request)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipmi_v2_payload__bindgen_ty_1__bindgen_ty_2 {
    pub rs_seq: u8,
    pub response: *mut ipmi_rs,
}
#[test]
fn bindgen_test_layout_ipmi_v2_payload__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<ipmi_v2_payload__bindgen_ty_1__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ipmi_v2_payload__bindgen_ty_1__bindgen_ty_2>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(ipmi_v2_payload__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ipmi_v2_payload__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(ipmi_v2_payload__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rs_seq) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_v2_payload__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(rs_seq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).response) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_v2_payload__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(response)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipmi_v2_payload__bindgen_ty_1__bindgen_ty_3 {
    pub request: *mut u8,
}
#[test]
fn bindgen_test_layout_ipmi_v2_payload__bindgen_ty_1__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<ipmi_v2_payload__bindgen_ty_1__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ipmi_v2_payload__bindgen_ty_1__bindgen_ty_3>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(ipmi_v2_payload__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ipmi_v2_payload__bindgen_ty_1__bindgen_ty_3>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(ipmi_v2_payload__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).request) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_v2_payload__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(request)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipmi_v2_payload__bindgen_ty_1__bindgen_ty_4 {
    pub message: *mut u8,
}
#[test]
fn bindgen_test_layout_ipmi_v2_payload__bindgen_ty_1__bindgen_ty_4() {
    const UNINIT: ::std::mem::MaybeUninit<ipmi_v2_payload__bindgen_ty_1__bindgen_ty_4> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ipmi_v2_payload__bindgen_ty_1__bindgen_ty_4>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(ipmi_v2_payload__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ipmi_v2_payload__bindgen_ty_1__bindgen_ty_4>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(ipmi_v2_payload__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).message) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_v2_payload__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(message)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipmi_v2_payload__bindgen_ty_1__bindgen_ty_5 {
    pub message: *mut u8,
}
#[test]
fn bindgen_test_layout_ipmi_v2_payload__bindgen_ty_1__bindgen_ty_5() {
    const UNINIT: ::std::mem::MaybeUninit<ipmi_v2_payload__bindgen_ty_1__bindgen_ty_5> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ipmi_v2_payload__bindgen_ty_1__bindgen_ty_5>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(ipmi_v2_payload__bindgen_ty_1__bindgen_ty_5)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ipmi_v2_payload__bindgen_ty_1__bindgen_ty_5>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(ipmi_v2_payload__bindgen_ty_1__bindgen_ty_5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).message) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_v2_payload__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(message)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipmi_v2_payload__bindgen_ty_1__bindgen_ty_6 {
    pub message: *mut u8,
}
#[test]
fn bindgen_test_layout_ipmi_v2_payload__bindgen_ty_1__bindgen_ty_6() {
    const UNINIT: ::std::mem::MaybeUninit<ipmi_v2_payload__bindgen_ty_1__bindgen_ty_6> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ipmi_v2_payload__bindgen_ty_1__bindgen_ty_6>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(ipmi_v2_payload__bindgen_ty_1__bindgen_ty_6)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ipmi_v2_payload__bindgen_ty_1__bindgen_ty_6>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(ipmi_v2_payload__bindgen_ty_1__bindgen_ty_6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).message) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_v2_payload__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(message)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipmi_v2_payload__bindgen_ty_1__bindgen_ty_7 {
    pub message: *mut u8,
}
#[test]
fn bindgen_test_layout_ipmi_v2_payload__bindgen_ty_1__bindgen_ty_7() {
    const UNINIT: ::std::mem::MaybeUninit<ipmi_v2_payload__bindgen_ty_1__bindgen_ty_7> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ipmi_v2_payload__bindgen_ty_1__bindgen_ty_7>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(ipmi_v2_payload__bindgen_ty_1__bindgen_ty_7)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ipmi_v2_payload__bindgen_ty_1__bindgen_ty_7>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(ipmi_v2_payload__bindgen_ty_1__bindgen_ty_7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).message) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_v2_payload__bindgen_ty_1__bindgen_ty_7),
            "::",
            stringify!(message)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipmi_v2_payload__bindgen_ty_1__bindgen_ty_8 {
    pub data: [u8; 1024usize],
    pub character_count: u16,
    pub packet_sequence_number: u8,
    pub acked_packet_number: u8,
    pub accepted_character_count: u8,
    pub is_nack: u8,
    pub assert_ring_wor: u8,
    pub generate_break: u8,
    pub deassert_cts: u8,
    pub deassert_dcd_dsr: u8,
    pub flush_inbound: u8,
    pub flush_outbound: u8,
}
#[test]
fn bindgen_test_layout_ipmi_v2_payload__bindgen_ty_1__bindgen_ty_8() {
    const UNINIT: ::std::mem::MaybeUninit<ipmi_v2_payload__bindgen_ty_1__bindgen_ty_8> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ipmi_v2_payload__bindgen_ty_1__bindgen_ty_8>(),
        1036usize,
        concat!(
            "Size of: ",
            stringify!(ipmi_v2_payload__bindgen_ty_1__bindgen_ty_8)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ipmi_v2_payload__bindgen_ty_1__bindgen_ty_8>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(ipmi_v2_payload__bindgen_ty_1__bindgen_ty_8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_v2_payload__bindgen_ty_1__bindgen_ty_8),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).character_count) as usize - ptr as usize },
        1024usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_v2_payload__bindgen_ty_1__bindgen_ty_8),
            "::",
            stringify!(character_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).packet_sequence_number) as usize - ptr as usize },
        1026usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_v2_payload__bindgen_ty_1__bindgen_ty_8),
            "::",
            stringify!(packet_sequence_number)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).acked_packet_number) as usize - ptr as usize },
        1027usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_v2_payload__bindgen_ty_1__bindgen_ty_8),
            "::",
            stringify!(acked_packet_number)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).accepted_character_count) as usize - ptr as usize },
        1028usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_v2_payload__bindgen_ty_1__bindgen_ty_8),
            "::",
            stringify!(accepted_character_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_nack) as usize - ptr as usize },
        1029usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_v2_payload__bindgen_ty_1__bindgen_ty_8),
            "::",
            stringify!(is_nack)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).assert_ring_wor) as usize - ptr as usize },
        1030usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_v2_payload__bindgen_ty_1__bindgen_ty_8),
            "::",
            stringify!(assert_ring_wor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).generate_break) as usize - ptr as usize },
        1031usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_v2_payload__bindgen_ty_1__bindgen_ty_8),
            "::",
            stringify!(generate_break)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deassert_cts) as usize - ptr as usize },
        1032usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_v2_payload__bindgen_ty_1__bindgen_ty_8),
            "::",
            stringify!(deassert_cts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deassert_dcd_dsr) as usize - ptr as usize },
        1033usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_v2_payload__bindgen_ty_1__bindgen_ty_8),
            "::",
            stringify!(deassert_dcd_dsr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flush_inbound) as usize - ptr as usize },
        1034usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_v2_payload__bindgen_ty_1__bindgen_ty_8),
            "::",
            stringify!(flush_inbound)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flush_outbound) as usize - ptr as usize },
        1035usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_v2_payload__bindgen_ty_1__bindgen_ty_8),
            "::",
            stringify!(flush_outbound)
        )
    );
}
#[test]
fn bindgen_test_layout_ipmi_v2_payload__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ipmi_v2_payload__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ipmi_v2_payload__bindgen_ty_1>(),
        1040usize,
        concat!("Size of: ", stringify!(ipmi_v2_payload__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ipmi_v2_payload__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(ipmi_v2_payload__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ipmi_request) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_v2_payload__bindgen_ty_1),
            "::",
            stringify!(ipmi_request)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ipmi_response) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_v2_payload__bindgen_ty_1),
            "::",
            stringify!(ipmi_response)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).open_session_request) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_v2_payload__bindgen_ty_1),
            "::",
            stringify!(open_session_request)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rakp_1_message) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_v2_payload__bindgen_ty_1),
            "::",
            stringify!(rakp_1_message)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rakp_2_message) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_v2_payload__bindgen_ty_1),
            "::",
            stringify!(rakp_2_message)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rakp_3_message) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_v2_payload__bindgen_ty_1),
            "::",
            stringify!(rakp_3_message)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rakp_4_message) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_v2_payload__bindgen_ty_1),
            "::",
            stringify!(rakp_4_message)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sol_packet) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_v2_payload__bindgen_ty_1),
            "::",
            stringify!(sol_packet)
        )
    );
}
#[test]
fn bindgen_test_layout_ipmi_v2_payload() {
    const UNINIT: ::std::mem::MaybeUninit<ipmi_v2_payload> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ipmi_v2_payload>(),
        1048usize,
        concat!("Size of: ", stringify!(ipmi_v2_payload))
    );
    assert_eq!(
        ::std::mem::align_of::<ipmi_v2_payload>(),
        8usize,
        concat!("Alignment of ", stringify!(ipmi_v2_payload))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).payload_length) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_v2_payload),
            "::",
            stringify!(payload_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).payload_type) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_v2_payload),
            "::",
            stringify!(payload_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).payload) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_v2_payload),
            "::",
            stringify!(payload)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ipmi_rs {
    pub ccode: u8,
    pub data: [u8; 1024usize],
    pub data_len: ::std::os::raw::c_int,
    pub msg: ipmi_rs__bindgen_ty_1,
    pub session: ipmi_rs__bindgen_ty_2,
    pub payload: ipmi_rs__bindgen_ty_3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipmi_rs__bindgen_ty_1 {
    pub netfn: u8,
    pub cmd: u8,
    pub seq: u8,
    pub lun: u8,
}
#[test]
fn bindgen_test_layout_ipmi_rs__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ipmi_rs__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ipmi_rs__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(ipmi_rs__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ipmi_rs__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(ipmi_rs__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).netfn) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_rs__bindgen_ty_1),
            "::",
            stringify!(netfn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmd) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_rs__bindgen_ty_1),
            "::",
            stringify!(cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seq) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_rs__bindgen_ty_1),
            "::",
            stringify!(seq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lun) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_rs__bindgen_ty_1),
            "::",
            stringify!(lun)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipmi_rs__bindgen_ty_2 {
    pub authtype: u8,
    pub seq: u32,
    pub id: u32,
    pub bEncrypted: u8,
    pub bAuthenticated: u8,
    pub payloadtype: u8,
    pub msglen: u16,
}
#[test]
fn bindgen_test_layout_ipmi_rs__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<ipmi_rs__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ipmi_rs__bindgen_ty_2>(),
        20usize,
        concat!("Size of: ", stringify!(ipmi_rs__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<ipmi_rs__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(ipmi_rs__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).authtype) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_rs__bindgen_ty_2),
            "::",
            stringify!(authtype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seq) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_rs__bindgen_ty_2),
            "::",
            stringify!(seq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_rs__bindgen_ty_2),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bEncrypted) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_rs__bindgen_ty_2),
            "::",
            stringify!(bEncrypted)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bAuthenticated) as usize - ptr as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_rs__bindgen_ty_2),
            "::",
            stringify!(bAuthenticated)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).payloadtype) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_rs__bindgen_ty_2),
            "::",
            stringify!(payloadtype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msglen) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_rs__bindgen_ty_2),
            "::",
            stringify!(msglen)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]pub union ipmi_rs__bindgen_ty_3 { pub ipmi_response : ipmi_rs__bindgen_ty_3__bindgen_ty_1 , pub open_session_response : ipmi_rs__bindgen_ty_3__bindgen_ty_2 , pub rakp2_message : ipmi_rs__bindgen_ty_3__bindgen_ty_3 , pub rakp4_message : ipmi_rs__bindgen_ty_3__bindgen_ty_4 , pub sol_packet : ipmi_rs__bindgen_ty_3__bindgen_ty_5 , }#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipmi_rs__bindgen_ty_3__bindgen_ty_1 {
    pub rq_addr: u8,
    pub netfn: u8,
    pub rq_lun: u8,
    pub rs_addr: u8,
    pub rq_seq: u8,
    pub rs_lun: u8,
    pub cmd: u8,
}
#[test]
fn bindgen_test_layout_ipmi_rs__bindgen_ty_3__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ipmi_rs__bindgen_ty_3__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ipmi_rs__bindgen_ty_3__bindgen_ty_1>(),
        7usize,
        concat!("Size of: ", stringify!(ipmi_rs__bindgen_ty_3__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ipmi_rs__bindgen_ty_3__bindgen_ty_1>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ipmi_rs__bindgen_ty_3__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rq_addr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_rs__bindgen_ty_3__bindgen_ty_1),
            "::",
            stringify!(rq_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).netfn) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_rs__bindgen_ty_3__bindgen_ty_1),
            "::",
            stringify!(netfn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rq_lun) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_rs__bindgen_ty_3__bindgen_ty_1),
            "::",
            stringify!(rq_lun)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rs_addr) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_rs__bindgen_ty_3__bindgen_ty_1),
            "::",
            stringify!(rs_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rq_seq) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_rs__bindgen_ty_3__bindgen_ty_1),
            "::",
            stringify!(rq_seq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rs_lun) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_rs__bindgen_ty_3__bindgen_ty_1),
            "::",
            stringify!(rs_lun)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmd) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_rs__bindgen_ty_3__bindgen_ty_1),
            "::",
            stringify!(cmd)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipmi_rs__bindgen_ty_3__bindgen_ty_2 {
    pub message_tag: u8,
    pub rakp_return_code: u8,
    pub max_priv_level: u8,
    pub console_id: u32,
    pub bmc_id: u32,
    pub auth_alg: u8,
    pub integrity_alg: u8,
    pub crypt_alg: u8,
}
#[test]
fn bindgen_test_layout_ipmi_rs__bindgen_ty_3__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<ipmi_rs__bindgen_ty_3__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ipmi_rs__bindgen_ty_3__bindgen_ty_2>(),
        16usize,
        concat!("Size of: ", stringify!(ipmi_rs__bindgen_ty_3__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<ipmi_rs__bindgen_ty_3__bindgen_ty_2>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(ipmi_rs__bindgen_ty_3__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).message_tag) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_rs__bindgen_ty_3__bindgen_ty_2),
            "::",
            stringify!(message_tag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rakp_return_code) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_rs__bindgen_ty_3__bindgen_ty_2),
            "::",
            stringify!(rakp_return_code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_priv_level) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_rs__bindgen_ty_3__bindgen_ty_2),
            "::",
            stringify!(max_priv_level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).console_id) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_rs__bindgen_ty_3__bindgen_ty_2),
            "::",
            stringify!(console_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bmc_id) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_rs__bindgen_ty_3__bindgen_ty_2),
            "::",
            stringify!(bmc_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).auth_alg) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_rs__bindgen_ty_3__bindgen_ty_2),
            "::",
            stringify!(auth_alg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).integrity_alg) as usize - ptr as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_rs__bindgen_ty_3__bindgen_ty_2),
            "::",
            stringify!(integrity_alg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).crypt_alg) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_rs__bindgen_ty_3__bindgen_ty_2),
            "::",
            stringify!(crypt_alg)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipmi_rs__bindgen_ty_3__bindgen_ty_3 {
    pub message_tag: u8,
    pub rakp_return_code: u8,
    pub console_id: u32,
    pub bmc_rand: [u8; 16usize],
    pub bmc_guid: [u8; 16usize],
    pub key_exchange_auth_code: [u8; 32usize],
}
#[test]
fn bindgen_test_layout_ipmi_rs__bindgen_ty_3__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<ipmi_rs__bindgen_ty_3__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ipmi_rs__bindgen_ty_3__bindgen_ty_3>(),
        72usize,
        concat!("Size of: ", stringify!(ipmi_rs__bindgen_ty_3__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<ipmi_rs__bindgen_ty_3__bindgen_ty_3>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(ipmi_rs__bindgen_ty_3__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).message_tag) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_rs__bindgen_ty_3__bindgen_ty_3),
            "::",
            stringify!(message_tag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rakp_return_code) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_rs__bindgen_ty_3__bindgen_ty_3),
            "::",
            stringify!(rakp_return_code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).console_id) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_rs__bindgen_ty_3__bindgen_ty_3),
            "::",
            stringify!(console_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bmc_rand) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_rs__bindgen_ty_3__bindgen_ty_3),
            "::",
            stringify!(bmc_rand)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bmc_guid) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_rs__bindgen_ty_3__bindgen_ty_3),
            "::",
            stringify!(bmc_guid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key_exchange_auth_code) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_rs__bindgen_ty_3__bindgen_ty_3),
            "::",
            stringify!(key_exchange_auth_code)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipmi_rs__bindgen_ty_3__bindgen_ty_4 {
    pub message_tag: u8,
    pub rakp_return_code: u8,
    pub console_id: u32,
    pub integrity_check_value: [u8; 32usize],
}
#[test]
fn bindgen_test_layout_ipmi_rs__bindgen_ty_3__bindgen_ty_4() {
    const UNINIT: ::std::mem::MaybeUninit<ipmi_rs__bindgen_ty_3__bindgen_ty_4> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ipmi_rs__bindgen_ty_3__bindgen_ty_4>(),
        40usize,
        concat!("Size of: ", stringify!(ipmi_rs__bindgen_ty_3__bindgen_ty_4))
    );
    assert_eq!(
        ::std::mem::align_of::<ipmi_rs__bindgen_ty_3__bindgen_ty_4>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(ipmi_rs__bindgen_ty_3__bindgen_ty_4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).message_tag) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_rs__bindgen_ty_3__bindgen_ty_4),
            "::",
            stringify!(message_tag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rakp_return_code) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_rs__bindgen_ty_3__bindgen_ty_4),
            "::",
            stringify!(rakp_return_code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).console_id) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_rs__bindgen_ty_3__bindgen_ty_4),
            "::",
            stringify!(console_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).integrity_check_value) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_rs__bindgen_ty_3__bindgen_ty_4),
            "::",
            stringify!(integrity_check_value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipmi_rs__bindgen_ty_3__bindgen_ty_5 {
    pub packet_sequence_number: u8,
    pub acked_packet_number: u8,
    pub accepted_character_count: u8,
    pub is_nack: u8,
    pub transfer_unavailable: u8,
    pub sol_inactive: u8,
    pub transmit_overrun: u8,
    pub break_detected: u8,
}
#[test]
fn bindgen_test_layout_ipmi_rs__bindgen_ty_3__bindgen_ty_5() {
    const UNINIT: ::std::mem::MaybeUninit<ipmi_rs__bindgen_ty_3__bindgen_ty_5> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ipmi_rs__bindgen_ty_3__bindgen_ty_5>(),
        8usize,
        concat!("Size of: ", stringify!(ipmi_rs__bindgen_ty_3__bindgen_ty_5))
    );
    assert_eq!(
        ::std::mem::align_of::<ipmi_rs__bindgen_ty_3__bindgen_ty_5>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ipmi_rs__bindgen_ty_3__bindgen_ty_5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).packet_sequence_number) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_rs__bindgen_ty_3__bindgen_ty_5),
            "::",
            stringify!(packet_sequence_number)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).acked_packet_number) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_rs__bindgen_ty_3__bindgen_ty_5),
            "::",
            stringify!(acked_packet_number)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).accepted_character_count) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_rs__bindgen_ty_3__bindgen_ty_5),
            "::",
            stringify!(accepted_character_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_nack) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_rs__bindgen_ty_3__bindgen_ty_5),
            "::",
            stringify!(is_nack)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).transfer_unavailable) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_rs__bindgen_ty_3__bindgen_ty_5),
            "::",
            stringify!(transfer_unavailable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sol_inactive) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_rs__bindgen_ty_3__bindgen_ty_5),
            "::",
            stringify!(sol_inactive)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).transmit_overrun) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_rs__bindgen_ty_3__bindgen_ty_5),
            "::",
            stringify!(transmit_overrun)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).break_detected) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_rs__bindgen_ty_3__bindgen_ty_5),
            "::",
            stringify!(break_detected)
        )
    );
}
#[test]
fn bindgen_test_layout_ipmi_rs__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<ipmi_rs__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ipmi_rs__bindgen_ty_3>(),
        72usize,
        concat!("Size of: ", stringify!(ipmi_rs__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<ipmi_rs__bindgen_ty_3>(),
        4usize,
        concat!("Alignment of ", stringify!(ipmi_rs__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ipmi_response) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_rs__bindgen_ty_3),
            "::",
            stringify!(ipmi_response)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).open_session_response) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_rs__bindgen_ty_3),
            "::",
            stringify!(open_session_response)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rakp2_message) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_rs__bindgen_ty_3),
            "::",
            stringify!(rakp2_message)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rakp4_message) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_rs__bindgen_ty_3),
            "::",
            stringify!(rakp4_message)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sol_packet) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_rs__bindgen_ty_3),
            "::",
            stringify!(sol_packet)
        )
    );
}
#[test]
fn bindgen_test_layout_ipmi_rs() {
    const UNINIT: ::std::mem::MaybeUninit<ipmi_rs> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ipmi_rs>(),
        1128usize,
        concat!("Size of: ", stringify!(ipmi_rs))
    );
    assert_eq!(
        ::std::mem::align_of::<ipmi_rs>(),
        4usize,
        concat!("Alignment of ", stringify!(ipmi_rs))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ccode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_rs),
            "::",
            stringify!(ccode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_rs),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_len) as usize - ptr as usize },
        1028usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_rs),
            "::",
            stringify!(data_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg) as usize - ptr as usize },
        1032usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_rs),
            "::",
            stringify!(msg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).session) as usize - ptr as usize },
        1036usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_rs),
            "::",
            stringify!(session)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).payload) as usize - ptr as usize },
        1056usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_rs),
            "::",
            stringify!(payload)
        )
    );
}
pub const IPMI_OEM_IPMI_OEM_UNKNOWN: IPMI_OEM = 0;
pub const IPMI_OEM_IPMI_OEM_DEBUG: IPMI_OEM = 16777214;
pub const IPMI_OEM_IPMI_OEM_RESERVED: IPMI_OEM = 1048575;
pub const IPMI_OEM_IPMI_OEM_IBM_2: IPMI_OEM = 2;
pub const IPMI_OEM_IPMI_OEM_HP: IPMI_OEM = 11;
pub const IPMI_OEM_IPMI_OEM_SUN: IPMI_OEM = 42;
pub const IPMI_OEM_IPMI_OEM_NOKIA: IPMI_OEM = 94;
pub const IPMI_OEM_IPMI_OEM_BULL: IPMI_OEM = 107;
pub const IPMI_OEM_IPMI_OEM_HITACHI_116: IPMI_OEM = 116;
pub const IPMI_OEM_IPMI_OEM_NEC: IPMI_OEM = 119;
pub const IPMI_OEM_IPMI_OEM_TOSHIBA: IPMI_OEM = 186;
pub const IPMI_OEM_IPMI_OEM_ERICSSON: IPMI_OEM = 193;
pub const IPMI_OEM_IPMI_OEM_INTEL: IPMI_OEM = 343;
pub const IPMI_OEM_IPMI_OEM_TATUNG: IPMI_OEM = 373;
pub const IPMI_OEM_IPMI_OEM_HITACHI_399: IPMI_OEM = 399;
pub const IPMI_OEM_IPMI_OEM_DELL: IPMI_OEM = 674;
pub const IPMI_OEM_IPMI_OEM_LMC: IPMI_OEM = 2168;
pub const IPMI_OEM_IPMI_OEM_RADISYS: IPMI_OEM = 4337;
pub const IPMI_OEM_IPMI_OEM_BROADCOM: IPMI_OEM = 4413;
pub const IPMI_OEM_IPMI_OEM_IBM_4769: IPMI_OEM = 4769;
pub const IPMI_OEM_IPMI_OEM_MAGNUM: IPMI_OEM = 5593;
pub const IPMI_OEM_IPMI_OEM_TYAN: IPMI_OEM = 6653;
pub const IPMI_OEM_IPMI_OEM_QUANTA: IPMI_OEM = 7244;
pub const IPMI_OEM_IPMI_OEM_VIKING: IPMI_OEM = 9237;
pub const IPMI_OEM_IPMI_OEM_ADVANTECH: IPMI_OEM = 10297;
pub const IPMI_OEM_IPMI_OEM_FUJITSU_SIEMENS: IPMI_OEM = 10368;
pub const IPMI_OEM_IPMI_OEM_AVOCENT: IPMI_OEM = 10418;
pub const IPMI_OEM_IPMI_OEM_PEPPERCON: IPMI_OEM = 10437;
pub const IPMI_OEM_IPMI_OEM_SUPERMICRO: IPMI_OEM = 10876;
pub const IPMI_OEM_IPMI_OEM_OSA: IPMI_OEM = 11102;
pub const IPMI_OEM_IPMI_OEM_GOOGLE: IPMI_OEM = 11129;
pub const IPMI_OEM_IPMI_OEM_PICMG: IPMI_OEM = 12634;
pub const IPMI_OEM_IPMI_OEM_RARITAN: IPMI_OEM = 13742;
pub const IPMI_OEM_IPMI_OEM_KONTRON: IPMI_OEM = 15000;
pub const IPMI_OEM_IPMI_OEM_PPS: IPMI_OEM = 16394;
pub const IPMI_OEM_IPMI_OEM_IBM_20301: IPMI_OEM = 20301;
pub const IPMI_OEM_IPMI_OEM_AMI: IPMI_OEM = 20974;
pub const IPMI_OEM_IPMI_OEM_ADLINK_24339: IPMI_OEM = 24339;
pub const IPMI_OEM_IPMI_OEM_NOKIA_SOLUTIONS_AND_NETWORKS: IPMI_OEM = 28458;
pub const IPMI_OEM_IPMI_OEM_VITA: IPMI_OEM = 33196;
pub const IPMI_OEM_IPMI_OEM_SUPERMICRO_47488: IPMI_OEM = 47488;
pub const IPMI_OEM_IPMI_OEM_YADRO: IPMI_OEM = 49769;
pub type IPMI_OEM = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipmi_oem_handle {
    pub name: *const ::std::os::raw::c_char,
    pub desc: *const ::std::os::raw::c_char,
    pub setup:
        ::std::option::Option<unsafe extern "C" fn(intf: *mut ipmi_intf) -> ::std::os::raw::c_int>,
}
#[test]
fn bindgen_test_layout_ipmi_oem_handle() {
    const UNINIT: ::std::mem::MaybeUninit<ipmi_oem_handle> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ipmi_oem_handle>(),
        24usize,
        concat!("Size of: ", stringify!(ipmi_oem_handle))
    );
    assert_eq!(
        ::std::mem::align_of::<ipmi_oem_handle>(),
        8usize,
        concat!("Alignment of ", stringify!(ipmi_oem_handle))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_oem_handle),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).desc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_oem_handle),
            "::",
            stringify!(desc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).setup) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_oem_handle),
            "::",
            stringify!(setup)
        )
    );
}
extern "C" {
    pub fn ipmi_oem_print();
}
extern "C" {
    pub fn ipmi_oem_setup(
        intf: *mut ipmi_intf,
        oemtype: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ipmi_oem_active(
        intf: *mut ipmi_intf,
        oemtype: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
pub const LANPLUS_SESSION_STATE_LANPLUS_STATE_PRESESSION: LANPLUS_SESSION_STATE = 0;
pub const LANPLUS_SESSION_STATE_LANPLUS_STATE_OPEN_SESSION_SENT: LANPLUS_SESSION_STATE = 1;
pub const LANPLUS_SESSION_STATE_LANPLUS_STATE_OPEN_SESSION_RECEIEVED: LANPLUS_SESSION_STATE = 2;
pub const LANPLUS_SESSION_STATE_LANPLUS_STATE_RAKP_1_SENT: LANPLUS_SESSION_STATE = 3;
pub const LANPLUS_SESSION_STATE_LANPLUS_STATE_RAKP_2_RECEIVED: LANPLUS_SESSION_STATE = 4;
pub const LANPLUS_SESSION_STATE_LANPLUS_STATE_RAKP_3_SENT: LANPLUS_SESSION_STATE = 5;
pub const LANPLUS_SESSION_STATE_LANPLUS_STATE_ACTIVE: LANPLUS_SESSION_STATE = 6;
pub const LANPLUS_SESSION_STATE_LANPLUS_STATE_CLOSE_SENT: LANPLUS_SESSION_STATE = 7;
pub type LANPLUS_SESSION_STATE = ::std::os::raw::c_uint;
pub const cipher_suite_ids_IPMI_LANPLUS_CIPHER_SUITE_0: cipher_suite_ids = 0;
pub const cipher_suite_ids_IPMI_LANPLUS_CIPHER_SUITE_1: cipher_suite_ids = 1;
pub const cipher_suite_ids_IPMI_LANPLUS_CIPHER_SUITE_2: cipher_suite_ids = 2;
pub const cipher_suite_ids_IPMI_LANPLUS_CIPHER_SUITE_3: cipher_suite_ids = 3;
pub const cipher_suite_ids_IPMI_LANPLUS_CIPHER_SUITE_4: cipher_suite_ids = 4;
pub const cipher_suite_ids_IPMI_LANPLUS_CIPHER_SUITE_5: cipher_suite_ids = 5;
pub const cipher_suite_ids_IPMI_LANPLUS_CIPHER_SUITE_6: cipher_suite_ids = 6;
pub const cipher_suite_ids_IPMI_LANPLUS_CIPHER_SUITE_7: cipher_suite_ids = 7;
pub const cipher_suite_ids_IPMI_LANPLUS_CIPHER_SUITE_8: cipher_suite_ids = 8;
pub const cipher_suite_ids_IPMI_LANPLUS_CIPHER_SUITE_9: cipher_suite_ids = 9;
pub const cipher_suite_ids_IPMI_LANPLUS_CIPHER_SUITE_10: cipher_suite_ids = 10;
pub const cipher_suite_ids_IPMI_LANPLUS_CIPHER_SUITE_11: cipher_suite_ids = 11;
pub const cipher_suite_ids_IPMI_LANPLUS_CIPHER_SUITE_12: cipher_suite_ids = 12;
pub const cipher_suite_ids_IPMI_LANPLUS_CIPHER_SUITE_13: cipher_suite_ids = 13;
pub const cipher_suite_ids_IPMI_LANPLUS_CIPHER_SUITE_14: cipher_suite_ids = 14;
pub const cipher_suite_ids_IPMI_LANPLUS_CIPHER_SUITE_RESERVED: cipher_suite_ids = 255;
pub type cipher_suite_ids = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cipher_suite_info {
    pub cipher_suite_id: cipher_suite_ids,
    pub auth_alg: u8,
    pub integrity_alg: u8,
    pub crypt_alg: u8,
    pub iana: u32,
}
#[test]
fn bindgen_test_layout_cipher_suite_info() {
    const UNINIT: ::std::mem::MaybeUninit<cipher_suite_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cipher_suite_info>(),
        12usize,
        concat!("Size of: ", stringify!(cipher_suite_info))
    );
    assert_eq!(
        ::std::mem::align_of::<cipher_suite_info>(),
        4usize,
        concat!("Alignment of ", stringify!(cipher_suite_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cipher_suite_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cipher_suite_info),
            "::",
            stringify!(cipher_suite_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).auth_alg) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cipher_suite_info),
            "::",
            stringify!(auth_alg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).integrity_alg) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(cipher_suite_info),
            "::",
            stringify!(integrity_alg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).crypt_alg) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(cipher_suite_info),
            "::",
            stringify!(crypt_alg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iana) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cipher_suite_info),
            "::",
            stringify!(iana)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipmi_session_params {
    pub hostname: *mut ::std::os::raw::c_char,
    pub username: [u8; 17usize],
    pub authcode_set: [u8; 21usize],
    pub authtype_set: u8,
    pub privlvl: u8,
    pub cipher_suite_id: cipher_suite_ids,
    pub sol_escape_char: ::std::os::raw::c_char,
    pub password: ::std::os::raw::c_int,
    pub port: ::std::os::raw::c_int,
    pub retry: ::std::os::raw::c_int,
    pub timeout: u32,
    pub kg: [u8; 21usize],
    pub lookupbit: u8,
}
#[test]
fn bindgen_test_layout_ipmi_session_params() {
    const UNINIT: ::std::mem::MaybeUninit<ipmi_session_params> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ipmi_session_params>(),
        96usize,
        concat!("Size of: ", stringify!(ipmi_session_params))
    );
    assert_eq!(
        ::std::mem::align_of::<ipmi_session_params>(),
        8usize,
        concat!("Alignment of ", stringify!(ipmi_session_params))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hostname) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_session_params),
            "::",
            stringify!(hostname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).username) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_session_params),
            "::",
            stringify!(username)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).authcode_set) as usize - ptr as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_session_params),
            "::",
            stringify!(authcode_set)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).authtype_set) as usize - ptr as usize },
        46usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_session_params),
            "::",
            stringify!(authtype_set)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).privlvl) as usize - ptr as usize },
        47usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_session_params),
            "::",
            stringify!(privlvl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cipher_suite_id) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_session_params),
            "::",
            stringify!(cipher_suite_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sol_escape_char) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_session_params),
            "::",
            stringify!(sol_escape_char)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).password) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_session_params),
            "::",
            stringify!(password)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_session_params),
            "::",
            stringify!(port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).retry) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_session_params),
            "::",
            stringify!(retry)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timeout) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_session_params),
            "::",
            stringify!(timeout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kg) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_session_params),
            "::",
            stringify!(kg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lookupbit) as usize - ptr as usize },
        93usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_session_params),
            "::",
            stringify!(lookupbit)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipmi_session {
    pub active: ::std::os::raw::c_int,
    pub session_id: u32,
    pub in_seq: u32,
    pub out_seq: u32,
    pub authcode: [u8; 21usize],
    pub challenge: [u8; 16usize],
    pub authtype: u8,
    pub authstatus: u8,
    pub authextra: u8,
    pub timeout: u32,
    pub addr: sockaddr_storage,
    pub addrlen: socklen_t,
    pub v2_data: ipmi_session__bindgen_ty_1,
    pub sol_data: ipmi_session__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipmi_session__bindgen_ty_1 {
    pub session_state: LANPLUS_SESSION_STATE,
    pub requested_auth_alg: u8,
    pub requested_integrity_alg: u8,
    pub requested_crypt_alg: u8,
    pub auth_alg: u8,
    pub integrity_alg: u8,
    pub crypt_alg: u8,
    pub max_priv_level: u8,
    pub console_id: u32,
    pub bmc_id: u32,
    pub console_rand: [u8; 16usize],
    pub bmc_rand: [u8; 16usize],
    pub bmc_guid: [u8; 16usize],
    pub requested_role: u8,
    pub rakp2_return_code: u8,
    pub sik: [u8; 32usize],
    pub sik_len: u8,
    pub kg: [u8; 21usize],
    pub k1: [u8; 32usize],
    pub k1_len: u8,
    pub k2: [u8; 32usize],
    pub k2_len: u8,
}
#[test]
fn bindgen_test_layout_ipmi_session__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ipmi_session__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ipmi_session__bindgen_ty_1>(),
        192usize,
        concat!("Size of: ", stringify!(ipmi_session__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ipmi_session__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(ipmi_session__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).session_state) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_session__bindgen_ty_1),
            "::",
            stringify!(session_state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).requested_auth_alg) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_session__bindgen_ty_1),
            "::",
            stringify!(requested_auth_alg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).requested_integrity_alg) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_session__bindgen_ty_1),
            "::",
            stringify!(requested_integrity_alg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).requested_crypt_alg) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_session__bindgen_ty_1),
            "::",
            stringify!(requested_crypt_alg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).auth_alg) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_session__bindgen_ty_1),
            "::",
            stringify!(auth_alg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).integrity_alg) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_session__bindgen_ty_1),
            "::",
            stringify!(integrity_alg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).crypt_alg) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_session__bindgen_ty_1),
            "::",
            stringify!(crypt_alg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_priv_level) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_session__bindgen_ty_1),
            "::",
            stringify!(max_priv_level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).console_id) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_session__bindgen_ty_1),
            "::",
            stringify!(console_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bmc_id) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_session__bindgen_ty_1),
            "::",
            stringify!(bmc_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).console_rand) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_session__bindgen_ty_1),
            "::",
            stringify!(console_rand)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bmc_rand) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_session__bindgen_ty_1),
            "::",
            stringify!(bmc_rand)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bmc_guid) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_session__bindgen_ty_1),
            "::",
            stringify!(bmc_guid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).requested_role) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_session__bindgen_ty_1),
            "::",
            stringify!(requested_role)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rakp2_return_code) as usize - ptr as usize },
        69usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_session__bindgen_ty_1),
            "::",
            stringify!(rakp2_return_code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sik) as usize - ptr as usize },
        70usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_session__bindgen_ty_1),
            "::",
            stringify!(sik)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sik_len) as usize - ptr as usize },
        102usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_session__bindgen_ty_1),
            "::",
            stringify!(sik_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kg) as usize - ptr as usize },
        103usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_session__bindgen_ty_1),
            "::",
            stringify!(kg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).k1) as usize - ptr as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_session__bindgen_ty_1),
            "::",
            stringify!(k1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).k1_len) as usize - ptr as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_session__bindgen_ty_1),
            "::",
            stringify!(k1_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).k2) as usize - ptr as usize },
        157usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_session__bindgen_ty_1),
            "::",
            stringify!(k2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).k2_len) as usize - ptr as usize },
        189usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_session__bindgen_ty_1),
            "::",
            stringify!(k2_len)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipmi_session__bindgen_ty_2 {
    pub max_inbound_payload_size: u16,
    pub max_outbound_payload_size: u16,
    pub port: u16,
    pub sequence_number: u8,
    pub last_received_sequence_number: u8,
    pub last_received_byte_count: u8,
    pub sol_input_handler: ::std::option::Option<unsafe extern "C" fn(rsp: *mut ipmi_rs)>,
}
#[test]
fn bindgen_test_layout_ipmi_session__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<ipmi_session__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ipmi_session__bindgen_ty_2>(),
        24usize,
        concat!("Size of: ", stringify!(ipmi_session__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<ipmi_session__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(ipmi_session__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_inbound_payload_size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_session__bindgen_ty_2),
            "::",
            stringify!(max_inbound_payload_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_outbound_payload_size) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_session__bindgen_ty_2),
            "::",
            stringify!(max_outbound_payload_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_session__bindgen_ty_2),
            "::",
            stringify!(port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sequence_number) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_session__bindgen_ty_2),
            "::",
            stringify!(sequence_number)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_received_sequence_number) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_session__bindgen_ty_2),
            "::",
            stringify!(last_received_sequence_number)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_received_byte_count) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_session__bindgen_ty_2),
            "::",
            stringify!(last_received_byte_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sol_input_handler) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_session__bindgen_ty_2),
            "::",
            stringify!(sol_input_handler)
        )
    );
}
#[test]
fn bindgen_test_layout_ipmi_session() {
    const UNINIT: ::std::mem::MaybeUninit<ipmi_session> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ipmi_session>(),
        416usize,
        concat!("Size of: ", stringify!(ipmi_session))
    );
    assert_eq!(
        ::std::mem::align_of::<ipmi_session>(),
        8usize,
        concat!("Alignment of ", stringify!(ipmi_session))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).active) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_session),
            "::",
            stringify!(active)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).session_id) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_session),
            "::",
            stringify!(session_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).in_seq) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_session),
            "::",
            stringify!(in_seq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).out_seq) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_session),
            "::",
            stringify!(out_seq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).authcode) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_session),
            "::",
            stringify!(authcode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).challenge) as usize - ptr as usize },
        37usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_session),
            "::",
            stringify!(challenge)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).authtype) as usize - ptr as usize },
        53usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_session),
            "::",
            stringify!(authtype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).authstatus) as usize - ptr as usize },
        54usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_session),
            "::",
            stringify!(authstatus)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).authextra) as usize - ptr as usize },
        55usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_session),
            "::",
            stringify!(authextra)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timeout) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_session),
            "::",
            stringify!(timeout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_session),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addrlen) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_session),
            "::",
            stringify!(addrlen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v2_data) as usize - ptr as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_session),
            "::",
            stringify!(v2_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sol_data) as usize - ptr as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_session),
            "::",
            stringify!(sol_data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipmi_cmd {
    pub func: ::std::option::Option<
        unsafe extern "C" fn(intf: *mut ipmi_intf,
                             argc: ::std::os::raw::c_int,
                             argv: *mut *mut ::std::os::raw::c_char)
                             -> ::std::os::raw::c_int,
    >,
    pub name: *const ::std::os::raw::c_char,
    pub desc: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_ipmi_cmd() {
    const UNINIT: ::std::mem::MaybeUninit<ipmi_cmd> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ipmi_cmd>(),
        24usize,
        concat!("Size of: ", stringify!(ipmi_cmd))
    );
    assert_eq!(
        ::std::mem::align_of::<ipmi_cmd>(),
        8usize,
        concat!("Alignment of ", stringify!(ipmi_cmd))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).func) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_cmd),
            "::",
            stringify!(func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_cmd),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).desc) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_cmd),
            "::",
            stringify!(desc)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipmi_intf_support {
    pub name: *const ::std::os::raw::c_char,
    pub supported: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ipmi_intf_support() {
    const UNINIT: ::std::mem::MaybeUninit<ipmi_intf_support> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ipmi_intf_support>(),
        16usize,
        concat!("Size of: ", stringify!(ipmi_intf_support))
    );
    assert_eq!(
        ::std::mem::align_of::<ipmi_intf_support>(),
        8usize,
        concat!("Alignment of ", stringify!(ipmi_intf_support))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_intf_support),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).supported) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_intf_support),
            "::",
            stringify!(supported)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipmi_intf {
    pub name: [::std::os::raw::c_char; 16usize],
    pub desc: [::std::os::raw::c_char; 128usize],
    pub devfile: *mut ::std::os::raw::c_char,
    pub fd: ::std::os::raw::c_int,
    pub opened: ::std::os::raw::c_int,
    pub abort: ::std::os::raw::c_int,
    pub noanswer: ::std::os::raw::c_int,
    pub picmg_avail: ::std::os::raw::c_int,
    pub vita_avail: ::std::os::raw::c_int,
    pub manufacturer_id: IPMI_OEM,
    pub ai_family: ::std::os::raw::c_int,
    pub ssn_params: ipmi_session_params,
    pub session: *mut ipmi_session,
    pub oem: *mut ipmi_oem_handle,
    pub cmdlist: *mut ipmi_cmd,
    pub target_ipmb_addr: u8,
    pub my_addr: u32,
    pub target_addr: u32,
    pub target_lun: u8,
    pub target_channel: u8,
    pub transit_addr: u32,
    pub transit_channel: u8,
    pub max_request_data_size: u16,
    pub max_response_data_size: u16,
    pub devnum: u8,
    pub setup:
        ::std::option::Option<unsafe extern "C" fn(intf: *mut ipmi_intf) -> ::std::os::raw::c_int>,
    pub open:
        ::std::option::Option<unsafe extern "C" fn(intf: *mut ipmi_intf) -> ::std::os::raw::c_int>,
    pub close: ::std::option::Option<unsafe extern "C" fn(intf: *mut ipmi_intf)>,
    pub sendrecv: ::std::option::Option<
        unsafe extern "C" fn(intf: *mut ipmi_intf,
                             req: *mut ipmi_rq)
                             -> *mut ipmi_rs,
    >,
    pub recv_sol: ::std::option::Option<unsafe extern "C" fn(intf: *mut ipmi_intf) -> *mut ipmi_rs>,
    pub send_sol: ::std::option::Option<
        unsafe extern "C" fn(intf: *mut ipmi_intf,
                             payload: *mut ipmi_v2_payload)
                             -> *mut ipmi_rs,
    >,
    pub keepalive:
        ::std::option::Option<unsafe extern "C" fn(intf: *mut ipmi_intf) -> ::std::os::raw::c_int>,
    pub set_my_addr: ::std::option::Option<
        unsafe extern "C" fn(intf: *mut ipmi_intf, addr: u8)
                             -> ::std::os::raw::c_int,
    >,
    pub set_max_request_data_size:
        ::std::option::Option<unsafe extern "C" fn(intf: *mut ipmi_intf, size: u16)>,
    pub set_max_response_data_size:
        ::std::option::Option<unsafe extern "C" fn(intf: *mut ipmi_intf, size: u16)>,
}
#[test]
fn bindgen_test_layout_ipmi_intf() {
    const UNINIT: ::std::mem::MaybeUninit<ipmi_intf> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ipmi_intf>(),
        416usize,
        concat!("Size of: ", stringify!(ipmi_intf))
    );
    assert_eq!(
        ::std::mem::align_of::<ipmi_intf>(),
        8usize,
        concat!("Alignment of ", stringify!(ipmi_intf))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_intf),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).desc) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_intf),
            "::",
            stringify!(desc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).devfile) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_intf),
            "::",
            stringify!(devfile)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fd) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_intf),
            "::",
            stringify!(fd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opened) as usize - ptr as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_intf),
            "::",
            stringify!(opened)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).abort) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_intf),
            "::",
            stringify!(abort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).noanswer) as usize - ptr as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_intf),
            "::",
            stringify!(noanswer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).picmg_avail) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_intf),
            "::",
            stringify!(picmg_avail)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vita_avail) as usize - ptr as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_intf),
            "::",
            stringify!(vita_avail)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).manufacturer_id) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_intf),
            "::",
            stringify!(manufacturer_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ai_family) as usize - ptr as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_intf),
            "::",
            stringify!(ai_family)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ssn_params) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_intf),
            "::",
            stringify!(ssn_params)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).session) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_intf),
            "::",
            stringify!(session)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).oem) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_intf),
            "::",
            stringify!(oem)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmdlist) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_intf),
            "::",
            stringify!(cmdlist)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_ipmb_addr) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_intf),
            "::",
            stringify!(target_ipmb_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).my_addr) as usize - ptr as usize },
        308usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_intf),
            "::",
            stringify!(my_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_addr) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_intf),
            "::",
            stringify!(target_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_lun) as usize - ptr as usize },
        316usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_intf),
            "::",
            stringify!(target_lun)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_channel) as usize - ptr as usize },
        317usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_intf),
            "::",
            stringify!(target_channel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).transit_addr) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_intf),
            "::",
            stringify!(transit_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).transit_channel) as usize - ptr as usize },
        324usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_intf),
            "::",
            stringify!(transit_channel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_request_data_size) as usize - ptr as usize },
        326usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_intf),
            "::",
            stringify!(max_request_data_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_response_data_size) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_intf),
            "::",
            stringify!(max_response_data_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).devnum) as usize - ptr as usize },
        330usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_intf),
            "::",
            stringify!(devnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).setup) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_intf),
            "::",
            stringify!(setup)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).open) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_intf),
            "::",
            stringify!(open)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).close) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_intf),
            "::",
            stringify!(close)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sendrecv) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_intf),
            "::",
            stringify!(sendrecv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).recv_sol) as usize - ptr as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_intf),
            "::",
            stringify!(recv_sol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).send_sol) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_intf),
            "::",
            stringify!(send_sol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).keepalive) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_intf),
            "::",
            stringify!(keepalive)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).set_my_addr) as usize - ptr as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_intf),
            "::",
            stringify!(set_my_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).set_max_request_data_size) as usize - ptr as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_intf),
            "::",
            stringify!(set_max_request_data_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).set_max_response_data_size) as usize - ptr as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_intf),
            "::",
            stringify!(set_max_response_data_size)
        )
    );
}
extern "C" {
    pub fn ipmi_intf_get_max_request_data_size(intf: *mut ipmi_intf) -> u16;
}
extern "C" {
    pub fn ipmi_intf_get_max_response_data_size(intf: *mut ipmi_intf) -> u16;
}
extern "C" {
    pub fn ipmi_intf_get_bridging_level(intf: *const ipmi_intf) -> u8;
}
extern "C" {
    pub fn ipmi_intf_load(name: *mut ::std::os::raw::c_char) -> *mut ipmi_intf;
}
extern "C" {
    pub fn ipmi_intf_print(intflist: *mut ipmi_intf_support);
}
extern "C" {
    pub fn ipmi_intf_session_set_hostname(
        intf: *mut ipmi_intf,
        hostname: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn ipmi_intf_session_set_username(
        intf: *mut ipmi_intf,
        username: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn ipmi_intf_session_set_password(
        intf: *mut ipmi_intf,
        password: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn ipmi_intf_session_set_privlvl(intf: *mut ipmi_intf, privlvl: u8);
}
extern "C" {
    pub fn ipmi_intf_session_set_lookupbit(intf: *mut ipmi_intf, lookupbit: u8);
}
extern "C" {
    pub fn ipmi_intf_session_set_sol_escape_char(
        intf: *mut ipmi_intf,
        sol_escape_char: ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn ipmi_intf_session_set_kgkey(intf: *mut ipmi_intf, kgkey: *const u8);
}
extern "C" {
    pub fn ipmi_intf_session_set_port(intf: *mut ipmi_intf, port: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ipmi_intf_session_set_authtype(intf: *mut ipmi_intf, authtype: u8);
}
extern "C" {
    pub fn ipmi_intf_session_set_timeout(intf: *mut ipmi_intf, timeout: u32);
}
extern "C" {
    pub fn ipmi_intf_session_set_retry(intf: *mut ipmi_intf, retry: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ipmi_intf_session_cleanup(intf: *mut ipmi_intf);
}
extern "C" {
    pub fn ipmi_cleanup(intf: *mut ipmi_intf);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct channel_info_t {
    pub channel: u8,
    pub medium: u8,
    pub protocol: u8,
    pub session_support: u8,
    pub active_sessions: u8,
    pub vendor_id: [u8; 3usize],
    pub aux_info: [u8; 2usize],
}
#[test]
fn bindgen_test_layout_channel_info_t() {
    const UNINIT: ::std::mem::MaybeUninit<channel_info_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<channel_info_t>(),
        10usize,
        concat!("Size of: ", stringify!(channel_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<channel_info_t>(),
        1usize,
        concat!("Alignment of ", stringify!(channel_info_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channel) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(channel_info_t),
            "::",
            stringify!(channel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).medium) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(channel_info_t),
            "::",
            stringify!(medium)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).protocol) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(channel_info_t),
            "::",
            stringify!(protocol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).session_support) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(channel_info_t),
            "::",
            stringify!(session_support)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).active_sessions) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(channel_info_t),
            "::",
            stringify!(active_sessions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vendor_id) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(channel_info_t),
            "::",
            stringify!(vendor_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aux_info) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(channel_info_t),
            "::",
            stringify!(aux_info)
        )
    );
}
extern "C" {
    pub fn ipmi_get_channel_cipher_suites(
        intf: *mut ipmi_intf,
        payload_type: *const ::std::os::raw::c_char,
        channel: u8,
        suites: *mut cipher_suite_info,
        count: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ipmi_get_channel_medium(intf: *mut ipmi_intf, channel: u8) -> u8;
}
extern "C" {
    pub fn ipmi_current_channel_info(intf: *mut ipmi_intf, chinfo: *mut channel_info_t);
}
extern "C" {
    pub fn ipmi_channel_main(
        intf: *mut ipmi_intf,
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ipmi_get_channel_auth_cap(
        intf: *mut ipmi_intf,
        channel: u8,
        priv_: u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ipmi_get_channel_info(intf: *mut ipmi_intf, channel: u8) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ipmi_chassis_power_status(intf: *mut ipmi_intf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ipmi_chassis_power_control(intf: *mut ipmi_intf, ctl: u8) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ipmi_chassis_main(
        intf: *mut ipmi_intf,
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ipmi_power_main(
        intf: *mut ipmi_intf,
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ipmi_dcmi_main(
        intf: *mut ipmi_intf,
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ipmi_nm_main(
        intf: *mut ipmi_intf,
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ipmi_delloem_main(
        intf: *mut ipmi_intf,
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct entity_id {
    pub id: u8,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_entity_id() {
    const UNINIT: ::std::mem::MaybeUninit<entity_id> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<entity_id>(),
        2usize,
        concat!("Size of: ", stringify!(entity_id))
    );
    assert_eq!(
        ::std::mem::align_of::<entity_id>(),
        1usize,
        concat!("Alignment of ", stringify!(entity_id))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(entity_id),
            "::",
            stringify!(id)
        )
    );
}
impl entity_id {
    #[inline]
    pub fn instance(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 7u8) as u8) }
    }
    #[inline]
    pub fn set_instance(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn logical(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_logical(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(instance: u8, logical: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 7u8, {
            let instance: u8 = unsafe { ::std::mem::transmute(instance) };
            instance as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let logical: u8 = unsafe { ::std::mem::transmute(logical) };
            logical as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub fn ipmi_sdr_main(
        arg1: *mut ipmi_intf,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct sdr_get_rs {
    pub next: u16,
    pub id: u16,
    pub version: u8,
    pub type_: u8,
    pub length: u8,
}
#[test]
fn bindgen_test_layout_sdr_get_rs() {
    const UNINIT: ::std::mem::MaybeUninit<sdr_get_rs> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sdr_get_rs>(),
        7usize,
        concat!("Size of: ", stringify!(sdr_get_rs))
    );
    assert_eq!(
        ::std::mem::align_of::<sdr_get_rs>(),
        1usize,
        concat!("Alignment of ", stringify!(sdr_get_rs))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_get_rs),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_get_rs),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_get_rs),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_get_rs),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_get_rs),
            "::",
            stringify!(length)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct sdr_record_mask {
    pub type_: sdr_record_mask__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]pub union sdr_record_mask__bindgen_ty_1 { pub discrete : sdr_record_mask__bindgen_ty_1__bindgen_ty_1 , pub threshold : sdr_record_mask__bindgen_ty_1__bindgen_ty_2 , }#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct sdr_record_mask__bindgen_ty_1__bindgen_ty_1 {
    pub assert_event: u16,
    pub deassert_event: u16,
    pub read: u16,
}
#[test]
fn bindgen_test_layout_sdr_record_mask__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<sdr_record_mask__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sdr_record_mask__bindgen_ty_1__bindgen_ty_1>(),
        6usize,
        concat!(
            "Size of: ",
            stringify!(sdr_record_mask__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<sdr_record_mask__bindgen_ty_1__bindgen_ty_1>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(sdr_record_mask__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).assert_event) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_mask__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(assert_event)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deassert_event) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_mask__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(deassert_event)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_mask__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(read)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct sdr_record_mask__bindgen_ty_1__bindgen_ty_2 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub __bindgen_anon_1: sdr_record_mask__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]pub union sdr_record_mask__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1 { pub set : sdr_record_mask__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1 , pub read : sdr_record_mask__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1__bindgen_ty_2 , }#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct sdr_record_mask__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[test]
fn bindgen_test_layout_sdr_record_mask__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1() {
    assert_eq ! (:: std :: mem :: size_of :: < sdr_record_mask__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1 > () , 2usize , concat ! ("Size of: " , stringify ! (sdr_record_mask__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1)));
    assert_eq ! (:: std :: mem :: align_of :: < sdr_record_mask__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1 > () , 1usize , concat ! ("Alignment of " , stringify ! (sdr_record_mask__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1)));
}
impl sdr_record_mask__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn readable(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u16) }
    }
    #[inline]
    pub fn set_readable(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn lnc(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_lnc(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn lcr(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_lcr(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn lnr(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_lnr(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn unc(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_unc(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ucr(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_ucr(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn unr(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_unr(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        readable: u16,
        lnc: u16,
        lcr: u16,
        lnr: u16,
        unc: u16,
        ucr: u16,
        unr: u16,
        reserved: u16,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let readable: u16 = unsafe { ::std::mem::transmute(readable) };
            readable as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let lnc: u16 = unsafe { ::std::mem::transmute(lnc) };
            lnc as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let lcr: u16 = unsafe { ::std::mem::transmute(lcr) };
            lcr as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let lnr: u16 = unsafe { ::std::mem::transmute(lnr) };
            lnr as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let unc: u16 = unsafe { ::std::mem::transmute(unc) };
            unc as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let ucr: u16 = unsafe { ::std::mem::transmute(ucr) };
            ucr as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let unr: u16 = unsafe { ::std::mem::transmute(unr) };
            unr as u64
        });
        __bindgen_bitfield_unit.set(14usize, 2u8, {
            let reserved: u16 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct sdr_record_mask__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1__bindgen_ty_2 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[test]
fn bindgen_test_layout_sdr_record_mask__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1__bindgen_ty_2() {
    assert_eq ! (:: std :: mem :: size_of :: < sdr_record_mask__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1__bindgen_ty_2 > () , 2usize , concat ! ("Size of: " , stringify ! (sdr_record_mask__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1__bindgen_ty_2)));
    assert_eq ! (:: std :: mem :: align_of :: < sdr_record_mask__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1__bindgen_ty_2 > () , 1usize , concat ! ("Alignment of " , stringify ! (sdr_record_mask__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1__bindgen_ty_2)));
}
impl sdr_record_mask__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1__bindgen_ty_2 {
    #[inline]
    pub fn lnc(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_lnc(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn lcr(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_lcr(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn lnr(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_lnr(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn unc(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_unc(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ucr(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_ucr(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn unr(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_unr(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn settable(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u16) }
    }
    #[inline]
    pub fn set_settable(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        lnc: u16,
        lcr: u16,
        lnr: u16,
        unc: u16,
        ucr: u16,
        unr: u16,
        reserved: u16,
        settable: u16,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let lnc: u16 = unsafe { ::std::mem::transmute(lnc) };
            lnc as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let lcr: u16 = unsafe { ::std::mem::transmute(lcr) };
            lcr as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let lnr: u16 = unsafe { ::std::mem::transmute(lnr) };
            lnr as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let unc: u16 = unsafe { ::std::mem::transmute(unc) };
            unc as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let ucr: u16 = unsafe { ::std::mem::transmute(ucr) };
            ucr as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let unr: u16 = unsafe { ::std::mem::transmute(unr) };
            unr as u64
        });
        __bindgen_bitfield_unit.set(6usize, 2u8, {
            let reserved: u16 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let settable: u16 = unsafe { ::std::mem::transmute(settable) };
            settable as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_sdr_record_mask__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1() {
    const UNINIT : :: std :: mem :: MaybeUninit < sdr_record_mask__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1 > = :: std :: mem :: MaybeUninit :: uninit () ;
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sdr_record_mask__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1>(),
        2usize,
        concat!(
            "Size of: ",
            stringify!(sdr_record_mask__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<sdr_record_mask__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(sdr_record_mask__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).set) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_mask__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(set)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_mask__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(read)
        )
    );
}
#[test]
fn bindgen_test_layout_sdr_record_mask__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<sdr_record_mask__bindgen_ty_1__bindgen_ty_2>(),
        6usize,
        concat!(
            "Size of: ",
            stringify!(sdr_record_mask__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<sdr_record_mask__bindgen_ty_1__bindgen_ty_2>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(sdr_record_mask__bindgen_ty_1__bindgen_ty_2)
        )
    );
}
impl sdr_record_mask__bindgen_ty_1__bindgen_ty_2 {
    #[inline]
    pub fn assert_lnc_low(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_assert_lnc_low(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn assert_lnc_high(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_assert_lnc_high(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn assert_lcr_low(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_assert_lcr_low(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn assert_lcr_high(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_assert_lcr_high(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn assert_lnr_low(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_assert_lnr_low(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn assert_lnr_high(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_assert_lnr_high(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn assert_unc_low(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_assert_unc_low(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn assert_unc_high(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_assert_unc_high(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn assert_ucr_low(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_assert_ucr_low(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn assert_ucr_high(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_assert_ucr_high(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn assert_unr_low(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_assert_unr_low(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn assert_unr_high(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_assert_unr_high(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn status_lnc(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_status_lnc(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn status_lcr(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_status_lcr(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn status_lnr(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_status_lnr(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn deassert_lnc_low(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_deassert_lnc_low(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn deassert_lnc_high(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(17usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_deassert_lnc_high(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(17usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn deassert_lcr_low(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(18usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_deassert_lcr_low(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(18usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn deassert_lcr_high(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(19usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_deassert_lcr_high(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(19usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn deassert_lnr_low(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(20usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_deassert_lnr_low(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(20usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn deassert_lnr_high(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(21usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_deassert_lnr_high(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(21usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn deassert_unc_low(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(22usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_deassert_unc_low(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(22usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn deassert_unc_high(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(23usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_deassert_unc_high(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(23usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn deassert_ucr_low(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_deassert_ucr_low(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn deassert_ucr_high(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(25usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_deassert_ucr_high(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(25usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn deassert_unr_low(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(26usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_deassert_unr_low(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(26usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn deassert_unr_high(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(27usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_deassert_unr_high(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(27usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn status_unc(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(28usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_status_unc(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(28usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn status_ucr(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(29usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_status_ucr(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(29usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn status_unr(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(30usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_status_unr(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(30usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved_2(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_reserved_2(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        assert_lnc_low: u16,
        assert_lnc_high: u16,
        assert_lcr_low: u16,
        assert_lcr_high: u16,
        assert_lnr_low: u16,
        assert_lnr_high: u16,
        assert_unc_low: u16,
        assert_unc_high: u16,
        assert_ucr_low: u16,
        assert_ucr_high: u16,
        assert_unr_low: u16,
        assert_unr_high: u16,
        status_lnc: u16,
        status_lcr: u16,
        status_lnr: u16,
        reserved: u16,
        deassert_lnc_low: u16,
        deassert_lnc_high: u16,
        deassert_lcr_low: u16,
        deassert_lcr_high: u16,
        deassert_lnr_low: u16,
        deassert_lnr_high: u16,
        deassert_unc_low: u16,
        deassert_unc_high: u16,
        deassert_ucr_low: u16,
        deassert_ucr_high: u16,
        deassert_unr_low: u16,
        deassert_unr_high: u16,
        status_unc: u16,
        status_ucr: u16,
        status_unr: u16,
        reserved_2: u16,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let assert_lnc_low: u16 = unsafe { ::std::mem::transmute(assert_lnc_low) };
            assert_lnc_low as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let assert_lnc_high: u16 = unsafe { ::std::mem::transmute(assert_lnc_high) };
            assert_lnc_high as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let assert_lcr_low: u16 = unsafe { ::std::mem::transmute(assert_lcr_low) };
            assert_lcr_low as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let assert_lcr_high: u16 = unsafe { ::std::mem::transmute(assert_lcr_high) };
            assert_lcr_high as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let assert_lnr_low: u16 = unsafe { ::std::mem::transmute(assert_lnr_low) };
            assert_lnr_low as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let assert_lnr_high: u16 = unsafe { ::std::mem::transmute(assert_lnr_high) };
            assert_lnr_high as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let assert_unc_low: u16 = unsafe { ::std::mem::transmute(assert_unc_low) };
            assert_unc_low as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let assert_unc_high: u16 = unsafe { ::std::mem::transmute(assert_unc_high) };
            assert_unc_high as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let assert_ucr_low: u16 = unsafe { ::std::mem::transmute(assert_ucr_low) };
            assert_ucr_low as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let assert_ucr_high: u16 = unsafe { ::std::mem::transmute(assert_ucr_high) };
            assert_ucr_high as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let assert_unr_low: u16 = unsafe { ::std::mem::transmute(assert_unr_low) };
            assert_unr_low as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let assert_unr_high: u16 = unsafe { ::std::mem::transmute(assert_unr_high) };
            assert_unr_high as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let status_lnc: u16 = unsafe { ::std::mem::transmute(status_lnc) };
            status_lnc as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let status_lcr: u16 = unsafe { ::std::mem::transmute(status_lcr) };
            status_lcr as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let status_lnr: u16 = unsafe { ::std::mem::transmute(status_lnr) };
            status_lnr as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let reserved: u16 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let deassert_lnc_low: u16 = unsafe { ::std::mem::transmute(deassert_lnc_low) };
            deassert_lnc_low as u64
        });
        __bindgen_bitfield_unit.set(17usize, 1u8, {
            let deassert_lnc_high: u16 = unsafe { ::std::mem::transmute(deassert_lnc_high) };
            deassert_lnc_high as u64
        });
        __bindgen_bitfield_unit.set(18usize, 1u8, {
            let deassert_lcr_low: u16 = unsafe { ::std::mem::transmute(deassert_lcr_low) };
            deassert_lcr_low as u64
        });
        __bindgen_bitfield_unit.set(19usize, 1u8, {
            let deassert_lcr_high: u16 = unsafe { ::std::mem::transmute(deassert_lcr_high) };
            deassert_lcr_high as u64
        });
        __bindgen_bitfield_unit.set(20usize, 1u8, {
            let deassert_lnr_low: u16 = unsafe { ::std::mem::transmute(deassert_lnr_low) };
            deassert_lnr_low as u64
        });
        __bindgen_bitfield_unit.set(21usize, 1u8, {
            let deassert_lnr_high: u16 = unsafe { ::std::mem::transmute(deassert_lnr_high) };
            deassert_lnr_high as u64
        });
        __bindgen_bitfield_unit.set(22usize, 1u8, {
            let deassert_unc_low: u16 = unsafe { ::std::mem::transmute(deassert_unc_low) };
            deassert_unc_low as u64
        });
        __bindgen_bitfield_unit.set(23usize, 1u8, {
            let deassert_unc_high: u16 = unsafe { ::std::mem::transmute(deassert_unc_high) };
            deassert_unc_high as u64
        });
        __bindgen_bitfield_unit.set(24usize, 1u8, {
            let deassert_ucr_low: u16 = unsafe { ::std::mem::transmute(deassert_ucr_low) };
            deassert_ucr_low as u64
        });
        __bindgen_bitfield_unit.set(25usize, 1u8, {
            let deassert_ucr_high: u16 = unsafe { ::std::mem::transmute(deassert_ucr_high) };
            deassert_ucr_high as u64
        });
        __bindgen_bitfield_unit.set(26usize, 1u8, {
            let deassert_unr_low: u16 = unsafe { ::std::mem::transmute(deassert_unr_low) };
            deassert_unr_low as u64
        });
        __bindgen_bitfield_unit.set(27usize, 1u8, {
            let deassert_unr_high: u16 = unsafe { ::std::mem::transmute(deassert_unr_high) };
            deassert_unr_high as u64
        });
        __bindgen_bitfield_unit.set(28usize, 1u8, {
            let status_unc: u16 = unsafe { ::std::mem::transmute(status_unc) };
            status_unc as u64
        });
        __bindgen_bitfield_unit.set(29usize, 1u8, {
            let status_ucr: u16 = unsafe { ::std::mem::transmute(status_ucr) };
            status_ucr as u64
        });
        __bindgen_bitfield_unit.set(30usize, 1u8, {
            let status_unr: u16 = unsafe { ::std::mem::transmute(status_unr) };
            status_unr as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let reserved_2: u16 = unsafe { ::std::mem::transmute(reserved_2) };
            reserved_2 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_sdr_record_mask__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<sdr_record_mask__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sdr_record_mask__bindgen_ty_1>(),
        6usize,
        concat!("Size of: ", stringify!(sdr_record_mask__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<sdr_record_mask__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(sdr_record_mask__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).discrete) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_mask__bindgen_ty_1),
            "::",
            stringify!(discrete)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).threshold) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_mask__bindgen_ty_1),
            "::",
            stringify!(threshold)
        )
    );
}
#[test]
fn bindgen_test_layout_sdr_record_mask() {
    const UNINIT: ::std::mem::MaybeUninit<sdr_record_mask> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sdr_record_mask>(),
        6usize,
        concat!("Size of: ", stringify!(sdr_record_mask))
    );
    assert_eq!(
        ::std::mem::align_of::<sdr_record_mask>(),
        1usize,
        concat!("Alignment of ", stringify!(sdr_record_mask))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_mask),
            "::",
            stringify!(type_)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct sdr_record_common_sensor {
    pub keys: sdr_record_common_sensor__bindgen_ty_1,
    pub entity: entity_id,
    pub sensor: sdr_record_common_sensor__bindgen_ty_2,
    pub event_type: u8,
    pub mask: sdr_record_mask,
    pub unit: sdr_record_common_sensor__bindgen_ty_3,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct sdr_record_common_sensor__bindgen_ty_1 {
    pub owner_id: u8,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub sensor_num: u8,
}
#[test]
fn bindgen_test_layout_sdr_record_common_sensor__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<sdr_record_common_sensor__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sdr_record_common_sensor__bindgen_ty_1>(),
        3usize,
        concat!(
            "Size of: ",
            stringify!(sdr_record_common_sensor__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<sdr_record_common_sensor__bindgen_ty_1>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(sdr_record_common_sensor__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).owner_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_common_sensor__bindgen_ty_1),
            "::",
            stringify!(owner_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sensor_num) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_common_sensor__bindgen_ty_1),
            "::",
            stringify!(sensor_num)
        )
    );
}
impl sdr_record_common_sensor__bindgen_ty_1 {
    #[inline]
    pub fn lun(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_lun(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn __reserved(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set___reserved(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn channel(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_channel(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        lun: u8,
        __reserved: u8,
        channel: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let lun: u8 = unsafe { ::std::mem::transmute(lun) };
            lun as u64
        });
        __bindgen_bitfield_unit.set(2usize, 2u8, {
            let __reserved: u8 = unsafe { ::std::mem::transmute(__reserved) };
            __reserved as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let channel: u8 = unsafe { ::std::mem::transmute(channel) };
            channel as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct sdr_record_common_sensor__bindgen_ty_2 {
    pub init: sdr_record_common_sensor__bindgen_ty_2__bindgen_ty_1,
    pub capabilities: sdr_record_common_sensor__bindgen_ty_2__bindgen_ty_2,
    pub type_: u8,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct sdr_record_common_sensor__bindgen_ty_2__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_sdr_record_common_sensor__bindgen_ty_2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<sdr_record_common_sensor__bindgen_ty_2__bindgen_ty_1>(),
        1usize,
        concat!(
            "Size of: ",
            stringify!(sdr_record_common_sensor__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<sdr_record_common_sensor__bindgen_ty_2__bindgen_ty_1>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(sdr_record_common_sensor__bindgen_ty_2__bindgen_ty_1)
        )
    );
}
impl sdr_record_common_sensor__bindgen_ty_2__bindgen_ty_1 {
    #[inline]
    pub fn sensor_scan(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_sensor_scan(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn event_gen(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_event_gen(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_type(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn hysteresis(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_hysteresis(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn thresholds(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_thresholds(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn events(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_events(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn scanning(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_scanning(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __reserved(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set___reserved(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        sensor_scan: u8,
        event_gen: u8,
        type_: u8,
        hysteresis: u8,
        thresholds: u8,
        events: u8,
        scanning: u8,
        __reserved: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let sensor_scan: u8 = unsafe { ::std::mem::transmute(sensor_scan) };
            sensor_scan as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let event_gen: u8 = unsafe { ::std::mem::transmute(event_gen) };
            event_gen as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let type_: u8 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let hysteresis: u8 = unsafe { ::std::mem::transmute(hysteresis) };
            hysteresis as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let thresholds: u8 = unsafe { ::std::mem::transmute(thresholds) };
            thresholds as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let events: u8 = unsafe { ::std::mem::transmute(events) };
            events as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let scanning: u8 = unsafe { ::std::mem::transmute(scanning) };
            scanning as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let __reserved: u8 = unsafe { ::std::mem::transmute(__reserved) };
            __reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct sdr_record_common_sensor__bindgen_ty_2__bindgen_ty_2 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_sdr_record_common_sensor__bindgen_ty_2__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<sdr_record_common_sensor__bindgen_ty_2__bindgen_ty_2>(),
        1usize,
        concat!(
            "Size of: ",
            stringify!(sdr_record_common_sensor__bindgen_ty_2__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<sdr_record_common_sensor__bindgen_ty_2__bindgen_ty_2>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(sdr_record_common_sensor__bindgen_ty_2__bindgen_ty_2)
        )
    );
}
impl sdr_record_common_sensor__bindgen_ty_2__bindgen_ty_2 {
    #[inline]
    pub fn event_msg(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_event_msg(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn threshold(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_threshold(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn hysteresis(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_hysteresis(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn rearm(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_rearm(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ignore(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_ignore(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        event_msg: u8,
        threshold: u8,
        hysteresis: u8,
        rearm: u8,
        ignore: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let event_msg: u8 = unsafe { ::std::mem::transmute(event_msg) };
            event_msg as u64
        });
        __bindgen_bitfield_unit.set(2usize, 2u8, {
            let threshold: u8 = unsafe { ::std::mem::transmute(threshold) };
            threshold as u64
        });
        __bindgen_bitfield_unit.set(4usize, 2u8, {
            let hysteresis: u8 = unsafe { ::std::mem::transmute(hysteresis) };
            hysteresis as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let rearm: u8 = unsafe { ::std::mem::transmute(rearm) };
            rearm as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let ignore: u8 = unsafe { ::std::mem::transmute(ignore) };
            ignore as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_sdr_record_common_sensor__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<sdr_record_common_sensor__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sdr_record_common_sensor__bindgen_ty_2>(),
        3usize,
        concat!(
            "Size of: ",
            stringify!(sdr_record_common_sensor__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<sdr_record_common_sensor__bindgen_ty_2>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(sdr_record_common_sensor__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).init) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_common_sensor__bindgen_ty_2),
            "::",
            stringify!(init)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).capabilities) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_common_sensor__bindgen_ty_2),
            "::",
            stringify!(capabilities)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_common_sensor__bindgen_ty_2),
            "::",
            stringify!(type_)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct sdr_record_common_sensor__bindgen_ty_3 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub type_: sdr_record_common_sensor__bindgen_ty_3__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct sdr_record_common_sensor__bindgen_ty_3__bindgen_ty_1 {
    pub base: u8,
    pub modifier: u8,
}
#[test]
fn bindgen_test_layout_sdr_record_common_sensor__bindgen_ty_3__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<sdr_record_common_sensor__bindgen_ty_3__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sdr_record_common_sensor__bindgen_ty_3__bindgen_ty_1>(),
        2usize,
        concat!(
            "Size of: ",
            stringify!(sdr_record_common_sensor__bindgen_ty_3__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<sdr_record_common_sensor__bindgen_ty_3__bindgen_ty_1>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(sdr_record_common_sensor__bindgen_ty_3__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_common_sensor__bindgen_ty_3__bindgen_ty_1),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).modifier) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_common_sensor__bindgen_ty_3__bindgen_ty_1),
            "::",
            stringify!(modifier)
        )
    );
}
#[test]
fn bindgen_test_layout_sdr_record_common_sensor__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<sdr_record_common_sensor__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sdr_record_common_sensor__bindgen_ty_3>(),
        3usize,
        concat!(
            "Size of: ",
            stringify!(sdr_record_common_sensor__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<sdr_record_common_sensor__bindgen_ty_3>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(sdr_record_common_sensor__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_common_sensor__bindgen_ty_3),
            "::",
            stringify!(type_)
        )
    );
}
impl sdr_record_common_sensor__bindgen_ty_3 {
    #[inline]
    pub fn pct(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pct(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn modifier(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_modifier(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn rate(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 3u8) as u8) }
    }
    #[inline]
    pub fn set_rate(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn analog(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_analog(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        pct: u8,
        modifier: u8,
        rate: u8,
        analog: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let pct: u8 = unsafe { ::std::mem::transmute(pct) };
            pct as u64
        });
        __bindgen_bitfield_unit.set(1usize, 2u8, {
            let modifier: u8 = unsafe { ::std::mem::transmute(modifier) };
            modifier as u64
        });
        __bindgen_bitfield_unit.set(3usize, 3u8, {
            let rate: u8 = unsafe { ::std::mem::transmute(rate) };
            rate as u64
        });
        __bindgen_bitfield_unit.set(6usize, 2u8, {
            let analog: u8 = unsafe { ::std::mem::transmute(analog) };
            analog as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_sdr_record_common_sensor() {
    const UNINIT: ::std::mem::MaybeUninit<sdr_record_common_sensor> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sdr_record_common_sensor>(),
        18usize,
        concat!("Size of: ", stringify!(sdr_record_common_sensor))
    );
    assert_eq!(
        ::std::mem::align_of::<sdr_record_common_sensor>(),
        1usize,
        concat!("Alignment of ", stringify!(sdr_record_common_sensor))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).keys) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_common_sensor),
            "::",
            stringify!(keys)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entity) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_common_sensor),
            "::",
            stringify!(entity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sensor) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_common_sensor),
            "::",
            stringify!(sensor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).event_type) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_common_sensor),
            "::",
            stringify!(event_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mask) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_common_sensor),
            "::",
            stringify!(mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unit) as usize - ptr as usize },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_common_sensor),
            "::",
            stringify!(unit)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct sdr_record_compact_sensor {
    pub cmn: sdr_record_common_sensor,
    pub share: sdr_record_compact_sensor__bindgen_ty_1,
    pub threshold: sdr_record_compact_sensor__bindgen_ty_2,
    pub __reserved: [u8; 3usize],
    pub oem: u8,
    pub id_code: u8,
    pub id_string: [u8; 16usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct sdr_record_compact_sensor__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[test]
fn bindgen_test_layout_sdr_record_compact_sensor__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<sdr_record_compact_sensor__bindgen_ty_1>(),
        2usize,
        concat!(
            "Size of: ",
            stringify!(sdr_record_compact_sensor__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<sdr_record_compact_sensor__bindgen_ty_1>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(sdr_record_compact_sensor__bindgen_ty_1)
        )
    );
}
impl sdr_record_compact_sensor__bindgen_ty_1 {
    #[inline]
    pub fn count(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_count(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn mod_type(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_mod_type(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn __reserved(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set___reserved(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn mod_offset(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 7u8) as u8) }
    }
    #[inline]
    pub fn set_mod_offset(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn entity_inst(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_entity_inst(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        count: u8,
        mod_type: u8,
        __reserved: u8,
        mod_offset: u8,
        entity_inst: u8,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let count: u8 = unsafe { ::std::mem::transmute(count) };
            count as u64
        });
        __bindgen_bitfield_unit.set(4usize, 2u8, {
            let mod_type: u8 = unsafe { ::std::mem::transmute(mod_type) };
            mod_type as u64
        });
        __bindgen_bitfield_unit.set(6usize, 2u8, {
            let __reserved: u8 = unsafe { ::std::mem::transmute(__reserved) };
            __reserved as u64
        });
        __bindgen_bitfield_unit.set(8usize, 7u8, {
            let mod_offset: u8 = unsafe { ::std::mem::transmute(mod_offset) };
            mod_offset as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let entity_inst: u8 = unsafe { ::std::mem::transmute(entity_inst) };
            entity_inst as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct sdr_record_compact_sensor__bindgen_ty_2 {
    pub hysteresis: sdr_record_compact_sensor__bindgen_ty_2__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct sdr_record_compact_sensor__bindgen_ty_2__bindgen_ty_1 {
    pub positive: u8,
    pub negative: u8,
}
#[test]
fn bindgen_test_layout_sdr_record_compact_sensor__bindgen_ty_2__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<sdr_record_compact_sensor__bindgen_ty_2__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sdr_record_compact_sensor__bindgen_ty_2__bindgen_ty_1>(),
        2usize,
        concat!(
            "Size of: ",
            stringify!(sdr_record_compact_sensor__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<sdr_record_compact_sensor__bindgen_ty_2__bindgen_ty_1>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(sdr_record_compact_sensor__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).positive) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_compact_sensor__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(positive)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).negative) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_compact_sensor__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(negative)
        )
    );
}
#[test]
fn bindgen_test_layout_sdr_record_compact_sensor__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<sdr_record_compact_sensor__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sdr_record_compact_sensor__bindgen_ty_2>(),
        2usize,
        concat!(
            "Size of: ",
            stringify!(sdr_record_compact_sensor__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<sdr_record_compact_sensor__bindgen_ty_2>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(sdr_record_compact_sensor__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hysteresis) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_compact_sensor__bindgen_ty_2),
            "::",
            stringify!(hysteresis)
        )
    );
}
#[test]
fn bindgen_test_layout_sdr_record_compact_sensor() {
    const UNINIT: ::std::mem::MaybeUninit<sdr_record_compact_sensor> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sdr_record_compact_sensor>(),
        43usize,
        concat!("Size of: ", stringify!(sdr_record_compact_sensor))
    );
    assert_eq!(
        ::std::mem::align_of::<sdr_record_compact_sensor>(),
        1usize,
        concat!("Alignment of ", stringify!(sdr_record_compact_sensor))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmn) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_compact_sensor),
            "::",
            stringify!(cmn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).share) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_compact_sensor),
            "::",
            stringify!(share)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).threshold) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_compact_sensor),
            "::",
            stringify!(threshold)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__reserved) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_compact_sensor),
            "::",
            stringify!(__reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).oem) as usize - ptr as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_compact_sensor),
            "::",
            stringify!(oem)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id_code) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_compact_sensor),
            "::",
            stringify!(id_code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id_string) as usize - ptr as usize },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_compact_sensor),
            "::",
            stringify!(id_string)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct sdr_record_eventonly_sensor {
    pub keys: sdr_record_eventonly_sensor__bindgen_ty_1,
    pub entity: entity_id,
    pub sensor_type: u8,
    pub event_type: u8,
    pub share: sdr_record_eventonly_sensor__bindgen_ty_2,
    pub __reserved: u8,
    pub oem: u8,
    pub id_code: u8,
    pub id_string: [u8; 16usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct sdr_record_eventonly_sensor__bindgen_ty_1 {
    pub owner_id: u8,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub sensor_num: u8,
}
#[test]
fn bindgen_test_layout_sdr_record_eventonly_sensor__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<sdr_record_eventonly_sensor__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sdr_record_eventonly_sensor__bindgen_ty_1>(),
        3usize,
        concat!(
            "Size of: ",
            stringify!(sdr_record_eventonly_sensor__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<sdr_record_eventonly_sensor__bindgen_ty_1>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(sdr_record_eventonly_sensor__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).owner_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_eventonly_sensor__bindgen_ty_1),
            "::",
            stringify!(owner_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sensor_num) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_eventonly_sensor__bindgen_ty_1),
            "::",
            stringify!(sensor_num)
        )
    );
}
impl sdr_record_eventonly_sensor__bindgen_ty_1 {
    #[inline]
    pub fn lun(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_lun(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn fru_owner(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_fru_owner(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn channel(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_channel(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        lun: u8,
        fru_owner: u8,
        channel: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let lun: u8 = unsafe { ::std::mem::transmute(lun) };
            lun as u64
        });
        __bindgen_bitfield_unit.set(2usize, 2u8, {
            let fru_owner: u8 = unsafe { ::std::mem::transmute(fru_owner) };
            fru_owner as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let channel: u8 = unsafe { ::std::mem::transmute(channel) };
            channel as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct sdr_record_eventonly_sensor__bindgen_ty_2 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[test]
fn bindgen_test_layout_sdr_record_eventonly_sensor__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<sdr_record_eventonly_sensor__bindgen_ty_2>(),
        2usize,
        concat!(
            "Size of: ",
            stringify!(sdr_record_eventonly_sensor__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<sdr_record_eventonly_sensor__bindgen_ty_2>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(sdr_record_eventonly_sensor__bindgen_ty_2)
        )
    );
}
impl sdr_record_eventonly_sensor__bindgen_ty_2 {
    #[inline]
    pub fn count(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_count(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn mod_type(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_mod_type(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn __reserved(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set___reserved(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn mod_offset(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 7u8) as u8) }
    }
    #[inline]
    pub fn set_mod_offset(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn entity_inst(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_entity_inst(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        count: u8,
        mod_type: u8,
        __reserved: u8,
        mod_offset: u8,
        entity_inst: u8,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let count: u8 = unsafe { ::std::mem::transmute(count) };
            count as u64
        });
        __bindgen_bitfield_unit.set(4usize, 2u8, {
            let mod_type: u8 = unsafe { ::std::mem::transmute(mod_type) };
            mod_type as u64
        });
        __bindgen_bitfield_unit.set(6usize, 2u8, {
            let __reserved: u8 = unsafe { ::std::mem::transmute(__reserved) };
            __reserved as u64
        });
        __bindgen_bitfield_unit.set(8usize, 7u8, {
            let mod_offset: u8 = unsafe { ::std::mem::transmute(mod_offset) };
            mod_offset as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let entity_inst: u8 = unsafe { ::std::mem::transmute(entity_inst) };
            entity_inst as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_sdr_record_eventonly_sensor() {
    const UNINIT: ::std::mem::MaybeUninit<sdr_record_eventonly_sensor> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sdr_record_eventonly_sensor>(),
        28usize,
        concat!("Size of: ", stringify!(sdr_record_eventonly_sensor))
    );
    assert_eq!(
        ::std::mem::align_of::<sdr_record_eventonly_sensor>(),
        1usize,
        concat!("Alignment of ", stringify!(sdr_record_eventonly_sensor))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).keys) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_eventonly_sensor),
            "::",
            stringify!(keys)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entity) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_eventonly_sensor),
            "::",
            stringify!(entity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sensor_type) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_eventonly_sensor),
            "::",
            stringify!(sensor_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).event_type) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_eventonly_sensor),
            "::",
            stringify!(event_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).share) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_eventonly_sensor),
            "::",
            stringify!(share)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__reserved) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_eventonly_sensor),
            "::",
            stringify!(__reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).oem) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_eventonly_sensor),
            "::",
            stringify!(oem)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id_code) as usize - ptr as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_eventonly_sensor),
            "::",
            stringify!(id_code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id_string) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_eventonly_sensor),
            "::",
            stringify!(id_string)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct sdr_record_full_sensor {
    pub cmn: sdr_record_common_sensor,
    pub linearization: u8,
    pub mtol: u16,
    pub bacc: u32,
    pub analog_flag: sdr_record_full_sensor__bindgen_ty_1,
    pub nominal_read: u8,
    pub normal_max: u8,
    pub normal_min: u8,
    pub sensor_max: u8,
    pub sensor_min: u8,
    pub threshold: sdr_record_full_sensor__bindgen_ty_2,
    pub __reserved: [u8; 2usize],
    pub oem: u8,
    pub id_code: u8,
    pub id_string: [u8; 16usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct sdr_record_full_sensor__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_sdr_record_full_sensor__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<sdr_record_full_sensor__bindgen_ty_1>(),
        1usize,
        concat!(
            "Size of: ",
            stringify!(sdr_record_full_sensor__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<sdr_record_full_sensor__bindgen_ty_1>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(sdr_record_full_sensor__bindgen_ty_1)
        )
    );
}
impl sdr_record_full_sensor__bindgen_ty_1 {
    #[inline]
    pub fn nominal_read(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_nominal_read(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn normal_max(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_normal_max(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn normal_min(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_normal_min(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __reserved(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 5u8) as u8) }
    }
    #[inline]
    pub fn set___reserved(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        nominal_read: u8,
        normal_max: u8,
        normal_min: u8,
        __reserved: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let nominal_read: u8 = unsafe { ::std::mem::transmute(nominal_read) };
            nominal_read as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let normal_max: u8 = unsafe { ::std::mem::transmute(normal_max) };
            normal_max as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let normal_min: u8 = unsafe { ::std::mem::transmute(normal_min) };
            normal_min as u64
        });
        __bindgen_bitfield_unit.set(3usize, 5u8, {
            let __reserved: u8 = unsafe { ::std::mem::transmute(__reserved) };
            __reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct sdr_record_full_sensor__bindgen_ty_2 {
    pub upper: sdr_record_full_sensor__bindgen_ty_2__bindgen_ty_1,
    pub lower: sdr_record_full_sensor__bindgen_ty_2__bindgen_ty_2,
    pub hysteresis: sdr_record_full_sensor__bindgen_ty_2__bindgen_ty_3,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct sdr_record_full_sensor__bindgen_ty_2__bindgen_ty_1 {
    pub non_recover: u8,
    pub critical: u8,
    pub non_critical: u8,
}
#[test]
fn bindgen_test_layout_sdr_record_full_sensor__bindgen_ty_2__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<sdr_record_full_sensor__bindgen_ty_2__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sdr_record_full_sensor__bindgen_ty_2__bindgen_ty_1>(),
        3usize,
        concat!(
            "Size of: ",
            stringify!(sdr_record_full_sensor__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<sdr_record_full_sensor__bindgen_ty_2__bindgen_ty_1>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(sdr_record_full_sensor__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).non_recover) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_full_sensor__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(non_recover)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).critical) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_full_sensor__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(critical)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).non_critical) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_full_sensor__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(non_critical)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct sdr_record_full_sensor__bindgen_ty_2__bindgen_ty_2 {
    pub non_recover: u8,
    pub critical: u8,
    pub non_critical: u8,
}
#[test]
fn bindgen_test_layout_sdr_record_full_sensor__bindgen_ty_2__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<sdr_record_full_sensor__bindgen_ty_2__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sdr_record_full_sensor__bindgen_ty_2__bindgen_ty_2>(),
        3usize,
        concat!(
            "Size of: ",
            stringify!(sdr_record_full_sensor__bindgen_ty_2__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<sdr_record_full_sensor__bindgen_ty_2__bindgen_ty_2>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(sdr_record_full_sensor__bindgen_ty_2__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).non_recover) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_full_sensor__bindgen_ty_2__bindgen_ty_2),
            "::",
            stringify!(non_recover)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).critical) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_full_sensor__bindgen_ty_2__bindgen_ty_2),
            "::",
            stringify!(critical)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).non_critical) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_full_sensor__bindgen_ty_2__bindgen_ty_2),
            "::",
            stringify!(non_critical)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct sdr_record_full_sensor__bindgen_ty_2__bindgen_ty_3 {
    pub positive: u8,
    pub negative: u8,
}
#[test]
fn bindgen_test_layout_sdr_record_full_sensor__bindgen_ty_2__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<sdr_record_full_sensor__bindgen_ty_2__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sdr_record_full_sensor__bindgen_ty_2__bindgen_ty_3>(),
        2usize,
        concat!(
            "Size of: ",
            stringify!(sdr_record_full_sensor__bindgen_ty_2__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<sdr_record_full_sensor__bindgen_ty_2__bindgen_ty_3>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(sdr_record_full_sensor__bindgen_ty_2__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).positive) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_full_sensor__bindgen_ty_2__bindgen_ty_3),
            "::",
            stringify!(positive)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).negative) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_full_sensor__bindgen_ty_2__bindgen_ty_3),
            "::",
            stringify!(negative)
        )
    );
}
#[test]
fn bindgen_test_layout_sdr_record_full_sensor__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<sdr_record_full_sensor__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sdr_record_full_sensor__bindgen_ty_2>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(sdr_record_full_sensor__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<sdr_record_full_sensor__bindgen_ty_2>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(sdr_record_full_sensor__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).upper) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_full_sensor__bindgen_ty_2),
            "::",
            stringify!(upper)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lower) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_full_sensor__bindgen_ty_2),
            "::",
            stringify!(lower)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hysteresis) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_full_sensor__bindgen_ty_2),
            "::",
            stringify!(hysteresis)
        )
    );
}
#[test]
fn bindgen_test_layout_sdr_record_full_sensor() {
    const UNINIT: ::std::mem::MaybeUninit<sdr_record_full_sensor> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sdr_record_full_sensor>(),
        59usize,
        concat!("Size of: ", stringify!(sdr_record_full_sensor))
    );
    assert_eq!(
        ::std::mem::align_of::<sdr_record_full_sensor>(),
        1usize,
        concat!("Alignment of ", stringify!(sdr_record_full_sensor))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmn) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_full_sensor),
            "::",
            stringify!(cmn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).linearization) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_full_sensor),
            "::",
            stringify!(linearization)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mtol) as usize - ptr as usize },
        19usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_full_sensor),
            "::",
            stringify!(mtol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bacc) as usize - ptr as usize },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_full_sensor),
            "::",
            stringify!(bacc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).analog_flag) as usize - ptr as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_full_sensor),
            "::",
            stringify!(analog_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nominal_read) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_full_sensor),
            "::",
            stringify!(nominal_read)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).normal_max) as usize - ptr as usize },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_full_sensor),
            "::",
            stringify!(normal_max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).normal_min) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_full_sensor),
            "::",
            stringify!(normal_min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sensor_max) as usize - ptr as usize },
        29usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_full_sensor),
            "::",
            stringify!(sensor_max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sensor_min) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_full_sensor),
            "::",
            stringify!(sensor_min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).threshold) as usize - ptr as usize },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_full_sensor),
            "::",
            stringify!(threshold)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__reserved) as usize - ptr as usize },
        39usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_full_sensor),
            "::",
            stringify!(__reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).oem) as usize - ptr as usize },
        41usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_full_sensor),
            "::",
            stringify!(oem)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id_code) as usize - ptr as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_full_sensor),
            "::",
            stringify!(id_code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id_string) as usize - ptr as usize },
        43usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_full_sensor),
            "::",
            stringify!(id_string)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct sdr_record_mc_locator {
    pub dev_slave_addr: u8,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub dev_support: u8,
    pub __reserved4: [u8; 3usize],
    pub entity: entity_id,
    pub oem: u8,
    pub id_code: u8,
    pub id_string: [u8; 16usize],
}
#[test]
fn bindgen_test_layout_sdr_record_mc_locator() {
    const UNINIT: ::std::mem::MaybeUninit<sdr_record_mc_locator> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sdr_record_mc_locator>(),
        27usize,
        concat!("Size of: ", stringify!(sdr_record_mc_locator))
    );
    assert_eq!(
        ::std::mem::align_of::<sdr_record_mc_locator>(),
        1usize,
        concat!("Alignment of ", stringify!(sdr_record_mc_locator))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dev_slave_addr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_mc_locator),
            "::",
            stringify!(dev_slave_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dev_support) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_mc_locator),
            "::",
            stringify!(dev_support)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__reserved4) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_mc_locator),
            "::",
            stringify!(__reserved4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entity) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_mc_locator),
            "::",
            stringify!(entity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).oem) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_mc_locator),
            "::",
            stringify!(oem)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id_code) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_mc_locator),
            "::",
            stringify!(id_code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id_string) as usize - ptr as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_mc_locator),
            "::",
            stringify!(id_string)
        )
    );
}
impl sdr_record_mc_locator {
    #[inline]
    pub fn channel_num(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_channel_num(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn __reserved2(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set___reserved2(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn global_init(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_global_init(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn __reserved3(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set___reserved3(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pwr_state_notif(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 3u8) as u8) }
    }
    #[inline]
    pub fn set_pwr_state_notif(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        channel_num: u8,
        __reserved2: u8,
        global_init: u8,
        __reserved3: u8,
        pwr_state_notif: u8,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let channel_num: u8 = unsafe { ::std::mem::transmute(channel_num) };
            channel_num as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let __reserved2: u8 = unsafe { ::std::mem::transmute(__reserved2) };
            __reserved2 as u64
        });
        __bindgen_bitfield_unit.set(8usize, 4u8, {
            let global_init: u8 = unsafe { ::std::mem::transmute(global_init) };
            global_init as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let __reserved3: u8 = unsafe { ::std::mem::transmute(__reserved3) };
            __reserved3 as u64
        });
        __bindgen_bitfield_unit.set(13usize, 3u8, {
            let pwr_state_notif: u8 = unsafe { ::std::mem::transmute(pwr_state_notif) };
            pwr_state_notif as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct sdr_record_fru_locator {
    pub dev_slave_addr: u8,
    pub device_id: u8,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub __reserved4: u8,
    pub dev_type: u8,
    pub dev_type_modifier: u8,
    pub entity: entity_id,
    pub oem: u8,
    pub id_code: u8,
    pub id_string: [u8; 16usize],
}
#[test]
fn bindgen_test_layout_sdr_record_fru_locator() {
    const UNINIT: ::std::mem::MaybeUninit<sdr_record_fru_locator> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sdr_record_fru_locator>(),
        27usize,
        concat!("Size of: ", stringify!(sdr_record_fru_locator))
    );
    assert_eq!(
        ::std::mem::align_of::<sdr_record_fru_locator>(),
        1usize,
        concat!("Alignment of ", stringify!(sdr_record_fru_locator))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dev_slave_addr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_fru_locator),
            "::",
            stringify!(dev_slave_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).device_id) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_fru_locator),
            "::",
            stringify!(device_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__reserved4) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_fru_locator),
            "::",
            stringify!(__reserved4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dev_type) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_fru_locator),
            "::",
            stringify!(dev_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dev_type_modifier) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_fru_locator),
            "::",
            stringify!(dev_type_modifier)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entity) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_fru_locator),
            "::",
            stringify!(entity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).oem) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_fru_locator),
            "::",
            stringify!(oem)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id_code) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_fru_locator),
            "::",
            stringify!(id_code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id_string) as usize - ptr as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_fru_locator),
            "::",
            stringify!(id_string)
        )
    );
}
impl sdr_record_fru_locator {
    #[inline]
    pub fn bus(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 3u8) as u8) }
    }
    #[inline]
    pub fn set_bus(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn lun(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_lun(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn __reserved2(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set___reserved2(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn logical(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_logical(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __reserved3(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set___reserved3(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn channel_num(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_channel_num(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bus: u8,
        lun: u8,
        __reserved2: u8,
        logical: u8,
        __reserved3: u8,
        channel_num: u8,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 3u8, {
            let bus: u8 = unsafe { ::std::mem::transmute(bus) };
            bus as u64
        });
        __bindgen_bitfield_unit.set(3usize, 2u8, {
            let lun: u8 = unsafe { ::std::mem::transmute(lun) };
            lun as u64
        });
        __bindgen_bitfield_unit.set(5usize, 2u8, {
            let __reserved2: u8 = unsafe { ::std::mem::transmute(__reserved2) };
            __reserved2 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let logical: u8 = unsafe { ::std::mem::transmute(logical) };
            logical as u64
        });
        __bindgen_bitfield_unit.set(8usize, 4u8, {
            let __reserved3: u8 = unsafe { ::std::mem::transmute(__reserved3) };
            __reserved3 as u64
        });
        __bindgen_bitfield_unit.set(12usize, 4u8, {
            let channel_num: u8 = unsafe { ::std::mem::transmute(channel_num) };
            channel_num as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct sdr_record_generic_locator {
    pub dev_access_addr: u8,
    pub dev_slave_addr: u8,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub __reserved2: u8,
    pub dev_type: u8,
    pub dev_type_modifier: u8,
    pub entity: entity_id,
    pub oem: u8,
    pub id_code: u8,
    pub id_string: [u8; 16usize],
}
#[test]
fn bindgen_test_layout_sdr_record_generic_locator() {
    const UNINIT: ::std::mem::MaybeUninit<sdr_record_generic_locator> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sdr_record_generic_locator>(),
        27usize,
        concat!("Size of: ", stringify!(sdr_record_generic_locator))
    );
    assert_eq!(
        ::std::mem::align_of::<sdr_record_generic_locator>(),
        1usize,
        concat!("Alignment of ", stringify!(sdr_record_generic_locator))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dev_access_addr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_generic_locator),
            "::",
            stringify!(dev_access_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dev_slave_addr) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_generic_locator),
            "::",
            stringify!(dev_slave_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__reserved2) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_generic_locator),
            "::",
            stringify!(__reserved2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dev_type) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_generic_locator),
            "::",
            stringify!(dev_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dev_type_modifier) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_generic_locator),
            "::",
            stringify!(dev_type_modifier)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entity) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_generic_locator),
            "::",
            stringify!(entity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).oem) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_generic_locator),
            "::",
            stringify!(oem)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id_code) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_generic_locator),
            "::",
            stringify!(id_code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id_string) as usize - ptr as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_generic_locator),
            "::",
            stringify!(id_string)
        )
    );
}
impl sdr_record_generic_locator {
    #[inline]
    pub fn bus(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 3u8) as u8) }
    }
    #[inline]
    pub fn set_bus(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn lun(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_lun(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn channel_num(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 3u8) as u8) }
    }
    #[inline]
    pub fn set_channel_num(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn __reserved1(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 5u8) as u8) }
    }
    #[inline]
    pub fn set___reserved1(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn addr_span(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 3u8) as u8) }
    }
    #[inline]
    pub fn set_addr_span(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bus: u8,
        lun: u8,
        channel_num: u8,
        __reserved1: u8,
        addr_span: u8,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 3u8, {
            let bus: u8 = unsafe { ::std::mem::transmute(bus) };
            bus as u64
        });
        __bindgen_bitfield_unit.set(3usize, 2u8, {
            let lun: u8 = unsafe { ::std::mem::transmute(lun) };
            lun as u64
        });
        __bindgen_bitfield_unit.set(5usize, 3u8, {
            let channel_num: u8 = unsafe { ::std::mem::transmute(channel_num) };
            channel_num as u64
        });
        __bindgen_bitfield_unit.set(8usize, 5u8, {
            let __reserved1: u8 = unsafe { ::std::mem::transmute(__reserved1) };
            __reserved1 as u64
        });
        __bindgen_bitfield_unit.set(13usize, 3u8, {
            let addr_span: u8 = unsafe { ::std::mem::transmute(addr_span) };
            addr_span as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct sdr_record_entity_assoc {
    pub entity: entity_id,
    pub flags: sdr_record_entity_assoc__bindgen_ty_1,
    pub entity_id_1: u8,
    pub entity_inst_1: u8,
    pub entity_id_2: u8,
    pub entity_inst_2: u8,
    pub entity_id_3: u8,
    pub entity_inst_3: u8,
    pub entity_id_4: u8,
    pub entity_inst_4: u8,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct sdr_record_entity_assoc__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_sdr_record_entity_assoc__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<sdr_record_entity_assoc__bindgen_ty_1>(),
        1usize,
        concat!(
            "Size of: ",
            stringify!(sdr_record_entity_assoc__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<sdr_record_entity_assoc__bindgen_ty_1>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(sdr_record_entity_assoc__bindgen_ty_1)
        )
    );
}
impl sdr_record_entity_assoc__bindgen_ty_1 {
    #[inline]
    pub fn __reserved(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 5u8) as u8) }
    }
    #[inline]
    pub fn set___reserved(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn isaccessable(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_isaccessable(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn islinked(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_islinked(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn isrange(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_isrange(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        __reserved: u8,
        isaccessable: u8,
        islinked: u8,
        isrange: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 5u8, {
            let __reserved: u8 = unsafe { ::std::mem::transmute(__reserved) };
            __reserved as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let isaccessable: u8 = unsafe { ::std::mem::transmute(isaccessable) };
            isaccessable as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let islinked: u8 = unsafe { ::std::mem::transmute(islinked) };
            islinked as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let isrange: u8 = unsafe { ::std::mem::transmute(isrange) };
            isrange as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_sdr_record_entity_assoc() {
    const UNINIT: ::std::mem::MaybeUninit<sdr_record_entity_assoc> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sdr_record_entity_assoc>(),
        11usize,
        concat!("Size of: ", stringify!(sdr_record_entity_assoc))
    );
    assert_eq!(
        ::std::mem::align_of::<sdr_record_entity_assoc>(),
        1usize,
        concat!("Alignment of ", stringify!(sdr_record_entity_assoc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entity) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_entity_assoc),
            "::",
            stringify!(entity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_entity_assoc),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entity_id_1) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_entity_assoc),
            "::",
            stringify!(entity_id_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entity_inst_1) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_entity_assoc),
            "::",
            stringify!(entity_inst_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entity_id_2) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_entity_assoc),
            "::",
            stringify!(entity_id_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entity_inst_2) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_entity_assoc),
            "::",
            stringify!(entity_inst_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entity_id_3) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_entity_assoc),
            "::",
            stringify!(entity_id_3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entity_inst_3) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_entity_assoc),
            "::",
            stringify!(entity_inst_3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entity_id_4) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_entity_assoc),
            "::",
            stringify!(entity_id_4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entity_inst_4) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_entity_assoc),
            "::",
            stringify!(entity_inst_4)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct sdr_record_oem {
    pub data: *mut u8,
    pub data_len: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sdr_record_oem() {
    const UNINIT: ::std::mem::MaybeUninit<sdr_record_oem> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sdr_record_oem>(),
        12usize,
        concat!("Size of: ", stringify!(sdr_record_oem))
    );
    assert_eq!(
        ::std::mem::align_of::<sdr_record_oem>(),
        1usize,
        concat!("Alignment of ", stringify!(sdr_record_oem))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_oem),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_len) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_oem),
            "::",
            stringify!(data_len)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ipmi_sdr_iterator {
    pub reservation: u16,
    pub total: ::std::os::raw::c_int,
    pub next: ::std::os::raw::c_int,
    pub use_built_in: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ipmi_sdr_iterator() {
    const UNINIT: ::std::mem::MaybeUninit<ipmi_sdr_iterator> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ipmi_sdr_iterator>(),
        14usize,
        concat!("Size of: ", stringify!(ipmi_sdr_iterator))
    );
    assert_eq!(
        ::std::mem::align_of::<ipmi_sdr_iterator>(),
        1usize,
        concat!("Alignment of ", stringify!(ipmi_sdr_iterator))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reservation) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_sdr_iterator),
            "::",
            stringify!(reservation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).total) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_sdr_iterator),
            "::",
            stringify!(total)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_sdr_iterator),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_built_in) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_sdr_iterator),
            "::",
            stringify!(use_built_in)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct sdr_record_list {
    pub id: u16,
    pub version: u8,
    pub type_: u8,
    pub length: u8,
    pub raw: *mut u8,
    pub next: *mut sdr_record_list,
    pub record: sdr_record_list__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]pub union sdr_record_list__bindgen_ty_1 { pub common : * mut sdr_record_common_sensor , pub full : * mut sdr_record_full_sensor , pub compact : * mut sdr_record_compact_sensor , pub eventonly : * mut sdr_record_eventonly_sensor , pub genloc : * mut sdr_record_generic_locator , pub fruloc : * mut sdr_record_fru_locator , pub mcloc : * mut sdr_record_mc_locator , pub entassoc : * mut sdr_record_entity_assoc , pub oem : * mut sdr_record_oem , }#[test]
fn bindgen_test_layout_sdr_record_list__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<sdr_record_list__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sdr_record_list__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(sdr_record_list__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<sdr_record_list__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(sdr_record_list__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).common) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_list__bindgen_ty_1),
            "::",
            stringify!(common)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).full) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_list__bindgen_ty_1),
            "::",
            stringify!(full)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).compact) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_list__bindgen_ty_1),
            "::",
            stringify!(compact)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eventonly) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_list__bindgen_ty_1),
            "::",
            stringify!(eventonly)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).genloc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_list__bindgen_ty_1),
            "::",
            stringify!(genloc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fruloc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_list__bindgen_ty_1),
            "::",
            stringify!(fruloc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mcloc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_list__bindgen_ty_1),
            "::",
            stringify!(mcloc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entassoc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_list__bindgen_ty_1),
            "::",
            stringify!(entassoc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).oem) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_list__bindgen_ty_1),
            "::",
            stringify!(oem)
        )
    );
}
#[test]
fn bindgen_test_layout_sdr_record_list() {
    const UNINIT: ::std::mem::MaybeUninit<sdr_record_list> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sdr_record_list>(),
        29usize,
        concat!("Size of: ", stringify!(sdr_record_list))
    );
    assert_eq!(
        ::std::mem::align_of::<sdr_record_list>(),
        1usize,
        concat!("Alignment of ", stringify!(sdr_record_list))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_list),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_list),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_list),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_list),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_list),
            "::",
            stringify!(raw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_list),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).record) as usize - ptr as usize },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(sdr_record_list),
            "::",
            stringify!(record)
        )
    );
}

// #[repr(C, packed)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sensor_reading {
    pub s_id: [::std::os::raw::c_char; 17usize],
    pub full: *mut sdr_record_full_sensor,
    pub compact: *mut sdr_record_compact_sensor,
    pub s_reading_valid: u8,
    pub s_scanning_disabled: u8,
    pub s_reading_unavailable: u8,
    pub s_reading: u8,
    pub s_data2: u8,
    pub s_data3: u8,
    pub s_has_analog_value: u8,
    pub s_a_val: f64,
    pub s_a_str: [::std::os::raw::c_char; 16usize],
    pub s_a_units: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_sensor_reading() {
    const UNINIT: ::std::mem::MaybeUninit<sensor_reading> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sensor_reading>(),
        72usize,
        concat!("Size of: ", stringify!(sensor_reading))
    );
    assert_eq!(
        ::std::mem::align_of::<sensor_reading>(),
        1usize,
        concat!("Alignment of ", stringify!(sensor_reading))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sensor_reading),
            "::",
            stringify!(s_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).full) as usize - ptr as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(sensor_reading),
            "::",
            stringify!(full)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).compact) as usize - ptr as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(sensor_reading),
            "::",
            stringify!(compact)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s_reading_valid) as usize - ptr as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(sensor_reading),
            "::",
            stringify!(s_reading_valid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s_scanning_disabled) as usize - ptr as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(sensor_reading),
            "::",
            stringify!(s_scanning_disabled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s_reading_unavailable) as usize - ptr as usize },
        35usize,
        concat!(
            "Offset of field: ",
            stringify!(sensor_reading),
            "::",
            stringify!(s_reading_unavailable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s_reading) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(sensor_reading),
            "::",
            stringify!(s_reading)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s_data2) as usize - ptr as usize },
        37usize,
        concat!(
            "Offset of field: ",
            stringify!(sensor_reading),
            "::",
            stringify!(s_data2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s_data3) as usize - ptr as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(sensor_reading),
            "::",
            stringify!(s_data3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s_has_analog_value) as usize - ptr as usize },
        39usize,
        concat!(
            "Offset of field: ",
            stringify!(sensor_reading),
            "::",
            stringify!(s_has_analog_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s_a_val) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sensor_reading),
            "::",
            stringify!(s_a_val)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s_a_str) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sensor_reading),
            "::",
            stringify!(s_a_str)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s_a_units) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(sensor_reading),
            "::",
            stringify!(s_a_units)
        )
    );
}
extern "C" {
    pub fn ipmi_sdr_start(
        intf: *mut ipmi_intf,
        use_builtin: ::std::os::raw::c_int,
    ) -> *mut ipmi_sdr_iterator;
}
extern "C" {
    pub fn ipmi_sdr_get_next_header(
        intf: *mut ipmi_intf,
        i: *mut ipmi_sdr_iterator,
    ) -> *mut sdr_get_rs;
}
extern "C" {
    pub fn ipmi_sdr_get_record(
        intf: *mut ipmi_intf,
        header: *mut sdr_get_rs,
        i: *mut ipmi_sdr_iterator,
    ) -> *mut u8;
}
extern "C" {
    pub fn ipmi_sdr_end(i: *mut ipmi_sdr_iterator);
}
extern "C" {
    pub fn ipmi_sdr_print_sdr(intf: *mut ipmi_intf, type_: u8) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ipmi_sdr_print_name_from_rawentry(
        id: u16,
        type_: u8,
        raw: *mut u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ipmi_sdr_print_rawentry(
        intf: *mut ipmi_intf,
        type_: u8,
        raw: *mut u8,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ipmi_sdr_print_listentry(
        intf: *mut ipmi_intf,
        entry: *mut sdr_record_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ipmi_sdr_print_sensor_hysteresis(
        sensor: *mut sdr_record_common_sensor,
        full: *mut sdr_record_full_sensor,
        hysteresis_value: u8,
        hdrstr: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn ipmi_sdr_get_unit_string(
        pct: bool,
        type_: u8,
        base: u8,
        modifier: u8,
    ) -> *const ::std::os::raw::c_char;
}

extern "C" {
    pub fn sdr_sensor_has_analog_reading(
        intf: *mut ipmi_intf,
        sr: *mut sensor_reading
    ) -> i32;
}


extern "C" {
    pub fn ipmi_sdr_read_sensor_value(
        intf: *mut ipmi_intf,
        sensor: *mut sdr_record_common_sensor,
        sdr_record_type: u8,
        precision: ::std::os::raw::c_int,
    ) -> *mut sensor_reading;
}
extern "C" {
    pub fn ipmi_sdr_get_thresh_status(
        sr: *mut sensor_reading,
        invalidstr: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ipmi_sdr_get_status(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        stat: u8,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ipmi_sdr_get_sensor_reading(intf: *mut ipmi_intf, sensor: u8) -> *mut ipmi_rs;
}
extern "C" {
    pub fn ipmi_sdr_get_sensor_reading_ipmb(
        intf: *mut ipmi_intf,
        sensor: u8,
        target: u8,
        lun: u8,
        channel: u8,
    ) -> *mut ipmi_rs;
}
extern "C" {
    pub fn ipmi_sdr_get_sensor_thresholds(
        intf: *mut ipmi_intf,
        sensor: u8,
        target: u8,
        lun: u8,
        channel: u8,
    ) -> *mut ipmi_rs;
}
extern "C" {
    pub fn ipmi_sdr_get_sensor_hysteresis(
        intf: *mut ipmi_intf,
        sensor: u8,
        target: u8,
        lun: u8,
        channel: u8,
    ) -> *mut ipmi_rs;
}
extern "C" {
    pub fn ipmi_sdr_get_reservation(
        intf: *mut ipmi_intf,
        use_builtin: ::std::os::raw::c_int,
        reserve_id: *mut u16,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ipmi_sdr_print_sensor_eventonly(
        intf: *mut ipmi_intf,
        sensor: *mut sdr_record_eventonly_sensor,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ipmi_sdr_print_sensor_generic_locator(
        fru: *mut sdr_record_generic_locator,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ipmi_sdr_print_sensor_fru_locator(
        fru: *mut sdr_record_fru_locator,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ipmi_sdr_print_sensor_mc_locator(
        mc: *mut sdr_record_mc_locator,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ipmi_sdr_find_sdr_byentity(
        intf: *mut ipmi_intf,
        entity: *mut entity_id,
    ) -> *mut sdr_record_list;
}
extern "C" {
    pub fn ipmi_sdr_find_sdr_bynumtype(
        intf: *mut ipmi_intf,
        gen_id: u16,
        num: u8,
        type_: u8,
    ) -> *mut sdr_record_list;
}
extern "C" {
    pub fn ipmi_sdr_find_sdr_bysensortype(intf: *mut ipmi_intf, type_: u8) -> *mut sdr_record_list;
}
extern "C" {
    pub fn ipmi_sdr_find_sdr_byid(
        intf: *mut ipmi_intf,
        id: *mut ::std::os::raw::c_char,
    ) -> *mut sdr_record_list;
}
extern "C" {
    pub fn ipmi_sdr_find_sdr_bytype(intf: *mut ipmi_intf, type_: u8) -> *mut sdr_record_list;
}
extern "C" {
    pub fn ipmi_sdr_list_cache(intf: *mut ipmi_intf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ipmi_sdr_list_cache_fromfile(
        ifile: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ipmi_sdr_list_empty();
}
extern "C" {
    pub fn ipmi_sdr_print_info(intf: *mut ipmi_intf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ipmi_sdr_print_discrete_state(
        intf: *mut ipmi_intf,
        desc: *const ::std::os::raw::c_char,
        sensor_type: u8,
        event_type: u8,
        state1: u8,
        state2: u8,
    );
}
extern "C" {
    pub fn ipmi_sdr_print_discrete_state_mini(
        intf: *mut ipmi_intf,
        header: *const ::std::os::raw::c_char,
        separator: *const ::std::os::raw::c_char,
        sensor_type: u8,
        event_type: u8,
        state1: u8,
        state2: u8,
    );
}
extern "C" {
    pub fn ipmi_sdr_print_sensor_event_status(
        intf: *mut ipmi_intf,
        sensor_num: u8,
        sensor_type: u8,
        event_type: u8,
        numeric_fmt: ::std::os::raw::c_int,
        target: u8,
        lun: u8,
        channel: u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ipmi_sdr_print_sensor_event_enable(
        intf: *mut ipmi_intf,
        sensor_num: u8,
        sensor_type: u8,
        event_type: u8,
        numeric_fmt: ::std::os::raw::c_int,
        target: u8,
        lun: u8,
        channel: u8,
    ) -> ::std::os::raw::c_int;
}
pub type ipmi_datebuf_t = [::std::os::raw::c_char; 80usize];
extern "C" {
    pub fn ipmi_asctime_r(
        stamp: time_t,
        outbuf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ipmi_strftime(
        s: *mut ::std::os::raw::c_char,
        max: usize,
        format: *const ::std::os::raw::c_char,
        stamp: time_t,
    ) -> usize;
}
extern "C" {
    pub fn ipmi_timestamp_fmt(
        stamp: u32,
        fmt: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ipmi_timestamp_string(stamp: u32) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ipmi_timestamp_numeric(stamp: u32) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ipmi_timestamp_date(stamp: u32) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ipmi_timestamp_time(stamp: u32) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ipmi_localtime2utc(local: time_t) -> time_t;
}
extern "C" {
    pub fn ipmi_fru_main(
        intf: *mut ipmi_intf,
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ipmi_fru_print(
        intf: *mut ipmi_intf,
        fru: *mut sdr_record_fru_locator,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ipmi_ekanalyzer_main(
        arg1: *mut ipmi_intf,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ipmi_event_main(
        arg1: *mut ipmi_intf,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ipmi_firewall_main(
        arg1: *mut ipmi_intf,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ipmi_fwum_main(
        arg1: *mut ipmi_intf,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ipmi_gendev_main(
        arg1: *mut ipmi_intf,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ipmi_ime_main(
        arg1: *mut ipmi_intf,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ipmi_isol_main(
        arg1: *mut ipmi_intf,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ipmi_kontronoem_main(
        arg1: *mut ipmi_intf,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ipmi_kontronoem_set_large_buffer(
        arg1: *mut ipmi_intf,
        size: ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ipmi_lanp_main(
        arg1: *mut ipmi_intf,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ipmi_main(
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
        cmdlist: *mut ipmi_cmd,
        intflist: *mut ipmi_intf_support,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ipmi_cmd_print(cmdlist: *mut ipmi_cmd);
}
extern "C" {
    pub fn ipmi_cmd_run(
        intf: *mut ipmi_intf,
        name: *mut ::std::os::raw::c_char,
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ipmi_oem_info_init() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ipmi_oem_info_free();
}
extern "C" {
    pub fn ipmi_mc_main(
        arg1: *mut ipmi_intf,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
pub const ipmi_guid_mode_t_GUID_RFC4122: ipmi_guid_mode_t = 0;
pub const ipmi_guid_mode_t_GUID_IPMI: ipmi_guid_mode_t = 1;
pub const ipmi_guid_mode_t_GUID_SMBIOS: ipmi_guid_mode_t = 2;
pub const ipmi_guid_mode_t_GUID_REAL_MODES: ipmi_guid_mode_t = 3;
pub const ipmi_guid_mode_t_GUID_AUTO: ipmi_guid_mode_t = 3;
pub const ipmi_guid_mode_t_GUID_DUMP: ipmi_guid_mode_t = 4;
pub const ipmi_guid_mode_t_GUID_TOTAL_MODES: ipmi_guid_mode_t = 5;
pub type ipmi_guid_mode_t = ::std::os::raw::c_uint;
pub const guid_version_t_GUID_VERSION_UNKNOWN: guid_version_t = 0;
pub const guid_version_t_GUID_VERSION_TIME: guid_version_t = 1;
pub const guid_version_t_GUID_VERSION_DCE: guid_version_t = 2;
pub const guid_version_t_GUID_VERSION_MD5: guid_version_t = 3;
pub const guid_version_t_GUID_VERSION_RND: guid_version_t = 4;
pub const guid_version_t_GUID_VERSION_SHA1: guid_version_t = 5;
pub const guid_version_t_GUID_VERSION_MAX: guid_version_t = 5;
pub const guid_version_t_GUID_VERSION_COUNT: guid_version_t = 6;
pub type guid_version_t = ::std::os::raw::c_uint;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct parsed_guid_t {
    pub node: [u8; 6usize],
    pub clock_seq_and_rsvd: u16,
    pub time_hi_and_version: u64,
    pub time_mid: u64,
    pub time_low: u64,
    pub time: time_t,
    pub mode: ipmi_guid_mode_t,
    pub ver: guid_version_t,
}
#[test]
fn bindgen_test_layout_parsed_guid_t() {
    const UNINIT: ::std::mem::MaybeUninit<parsed_guid_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<parsed_guid_t>(),
        48usize,
        concat!("Size of: ", stringify!(parsed_guid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<parsed_guid_t>(),
        1usize,
        concat!("Alignment of ", stringify!(parsed_guid_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).node) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(parsed_guid_t),
            "::",
            stringify!(node)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clock_seq_and_rsvd) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(parsed_guid_t),
            "::",
            stringify!(clock_seq_and_rsvd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_hi_and_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(parsed_guid_t),
            "::",
            stringify!(time_hi_and_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_mid) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(parsed_guid_t),
            "::",
            stringify!(time_mid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_low) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(parsed_guid_t),
            "::",
            stringify!(time_low)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(parsed_guid_t),
            "::",
            stringify!(time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(parsed_guid_t),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ver) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(parsed_guid_t),
            "::",
            stringify!(ver)
        )
    );
}
extern "C" {
    pub fn ipmi_parse_guid(
        guid: *mut ::std::os::raw::c_void,
        guid_mode: ipmi_guid_mode_t,
    ) -> parsed_guid_t;
}
extern "C" {
    pub fn ipmi_mc_getsysinfo(
        intf: *mut ipmi_intf,
        param: ::std::os::raw::c_int,
        block: ::std::os::raw::c_int,
        set: ::std::os::raw::c_int,
        len: ::std::os::raw::c_int,
        buffer: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ipmi_mc_setsysinfo(
        intf: *mut ipmi_intf,
        len: ::std::os::raw::c_int,
        buffer: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
pub const flg_e_P_TRUE: flg_e = 0;
pub const flg_e_P_SUPP: flg_e = 1;
pub const flg_e_P_ACTV: flg_e = 2;
pub const flg_e_P_ABLE: flg_e = 3;
pub type flg_e = ::std::os::raw::c_uint;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct desc_map {
    pub desc: *const ::std::os::raw::c_char,
    pub mask: u32,
}
#[test]
fn bindgen_test_layout_desc_map() {
    const UNINIT: ::std::mem::MaybeUninit<desc_map> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<desc_map>(),
        12usize,
        concat!("Size of: ", stringify!(desc_map))
    );
    assert_eq!(
        ::std::mem::align_of::<desc_map>(),
        1usize,
        concat!("Alignment of ", stringify!(desc_map))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).desc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(desc_map),
            "::",
            stringify!(desc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mask) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(desc_map),
            "::",
            stringify!(mask)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct bit_desc_map {
    pub desc_map_type: u32,
    pub desc_maps: [desc_map; 128usize],
}
#[test]
fn bindgen_test_layout_bit_desc_map() {
    const UNINIT: ::std::mem::MaybeUninit<bit_desc_map> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<bit_desc_map>(),
        1540usize,
        concat!("Size of: ", stringify!(bit_desc_map))
    );
    assert_eq!(
        ::std::mem::align_of::<bit_desc_map>(),
        1usize,
        concat!("Alignment of ", stringify!(bit_desc_map))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).desc_map_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bit_desc_map),
            "::",
            stringify!(desc_map_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).desc_maps) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(bit_desc_map),
            "::",
            stringify!(desc_maps)
        )
    );
}
extern "C" {
    pub fn ipmi_pef_bit_desc(map: *mut bit_desc_map, val: u32) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ipmi_pef_print_flags(map: *mut bit_desc_map, type_: flg_e, val: u32);
}
extern "C" {
    pub fn ipmi_pef_print_dec(text: *const ::std::os::raw::c_char, val: u32);
}
extern "C" {
    pub fn ipmi_pef_print_hex(text: *const ::std::os::raw::c_char, val: u32);
}
extern "C" {
    pub fn ipmi_pef_print_1xd(text: *const ::std::os::raw::c_char, val: u32);
}
extern "C" {
    pub fn ipmi_pef_print_2xd(text: *const ::std::os::raw::c_char, u1: u8, u2: u8);
}
extern "C" {
    pub fn ipmi_pef_print_str(
        text: *const ::std::os::raw::c_char,
        val: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn ipmi_pef_main(
        intf: *mut ipmi_intf,
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn picmg_led_color_str(color: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ipmi_picmg_main(
        intf: *mut ipmi_intf,
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn picmg_discover(intf: *mut ipmi_intf) -> u8;
}
extern "C" {
    pub fn ipmi_picmg_ipmb_address(intf: *mut ipmi_intf) -> u8;
}
extern "C" {
    pub fn ipmi_raw_main(
        intf: *mut ipmi_intf,
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ipmi_master_write_read(
        intf: *mut ipmi_intf,
        bus: u8,
        addr: u8,
        wdata: *mut u8,
        wsize: u8,
        rsize: u8,
    ) -> *mut ipmi_rs;
}
extern "C" {
    pub fn ipmi_rawi2c_main(
        intf: *mut ipmi_intf,
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ipmi_rawspd_main(
        intf: *mut ipmi_intf,
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ipmi_sdr_add_from_sensors(
        intf: *mut ipmi_intf,
        maxslot: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ipmi_sdr_add_from_file(
        intf: *mut ipmi_intf,
        ifile: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ipmi_sdr_add_from_list(
        intf: *mut ipmi_intf,
        rangeList: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct standard_spec_sel_rec {
    pub timestamp: u32,
    pub gen_id: u16,
    pub evm_rev: u8,
    pub sensor_type: u8,
    pub sensor_num: u8,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub event_data: [u8; 3usize],
}
#[test]
fn bindgen_test_layout_standard_spec_sel_rec() {
    const UNINIT: ::std::mem::MaybeUninit<standard_spec_sel_rec> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<standard_spec_sel_rec>(),
        13usize,
        concat!("Size of: ", stringify!(standard_spec_sel_rec))
    );
    assert_eq!(
        ::std::mem::align_of::<standard_spec_sel_rec>(),
        1usize,
        concat!("Alignment of ", stringify!(standard_spec_sel_rec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timestamp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(standard_spec_sel_rec),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gen_id) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(standard_spec_sel_rec),
            "::",
            stringify!(gen_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).evm_rev) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(standard_spec_sel_rec),
            "::",
            stringify!(evm_rev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sensor_type) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(standard_spec_sel_rec),
            "::",
            stringify!(sensor_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sensor_num) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(standard_spec_sel_rec),
            "::",
            stringify!(sensor_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).event_data) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(standard_spec_sel_rec),
            "::",
            stringify!(event_data)
        )
    );
}
impl standard_spec_sel_rec {
    #[inline]
    pub fn event_type(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 7u8) as u8) }
    }
    #[inline]
    pub fn set_event_type(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn event_dir(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_event_dir(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(event_type: u8, event_dir: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 7u8, {
            let event_type: u8 = unsafe { ::std::mem::transmute(event_type) };
            event_type as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let event_dir: u8 = unsafe { ::std::mem::transmute(event_dir) };
            event_dir as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct oem_ts_spec_sel_rec {
    pub timestamp: u32,
    pub manf_id: [u8; 3usize],
    pub oem_defined: [u8; 6usize],
}
#[test]
fn bindgen_test_layout_oem_ts_spec_sel_rec() {
    const UNINIT: ::std::mem::MaybeUninit<oem_ts_spec_sel_rec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<oem_ts_spec_sel_rec>(),
        13usize,
        concat!("Size of: ", stringify!(oem_ts_spec_sel_rec))
    );
    assert_eq!(
        ::std::mem::align_of::<oem_ts_spec_sel_rec>(),
        1usize,
        concat!("Alignment of ", stringify!(oem_ts_spec_sel_rec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timestamp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(oem_ts_spec_sel_rec),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).manf_id) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(oem_ts_spec_sel_rec),
            "::",
            stringify!(manf_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).oem_defined) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(oem_ts_spec_sel_rec),
            "::",
            stringify!(oem_defined)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct oem_nots_spec_sel_rec {
    pub oem_defined: [u8; 13usize],
}
#[test]
fn bindgen_test_layout_oem_nots_spec_sel_rec() {
    const UNINIT: ::std::mem::MaybeUninit<oem_nots_spec_sel_rec> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<oem_nots_spec_sel_rec>(),
        13usize,
        concat!("Size of: ", stringify!(oem_nots_spec_sel_rec))
    );
    assert_eq!(
        ::std::mem::align_of::<oem_nots_spec_sel_rec>(),
        1usize,
        concat!("Alignment of ", stringify!(oem_nots_spec_sel_rec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).oem_defined) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(oem_nots_spec_sel_rec),
            "::",
            stringify!(oem_defined)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct sel_event_record {
    pub record_id: u16,
    pub record_type: u8,
    pub sel_type: sel_event_record__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]pub union sel_event_record__bindgen_ty_1 { pub standard_type : standard_spec_sel_rec , pub oem_ts_type : oem_ts_spec_sel_rec , pub oem_nots_type : oem_nots_spec_sel_rec , }#[test]
fn bindgen_test_layout_sel_event_record__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<sel_event_record__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sel_event_record__bindgen_ty_1>(),
        13usize,
        concat!("Size of: ", stringify!(sel_event_record__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<sel_event_record__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(sel_event_record__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).standard_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sel_event_record__bindgen_ty_1),
            "::",
            stringify!(standard_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).oem_ts_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sel_event_record__bindgen_ty_1),
            "::",
            stringify!(oem_ts_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).oem_nots_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sel_event_record__bindgen_ty_1),
            "::",
            stringify!(oem_nots_type)
        )
    );
}
#[test]
fn bindgen_test_layout_sel_event_record() {
    const UNINIT: ::std::mem::MaybeUninit<sel_event_record> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sel_event_record>(),
        16usize,
        concat!("Size of: ", stringify!(sel_event_record))
    );
    assert_eq!(
        ::std::mem::align_of::<sel_event_record>(),
        1usize,
        concat!("Alignment of ", stringify!(sel_event_record))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).record_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sel_event_record),
            "::",
            stringify!(record_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).record_type) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sel_event_record),
            "::",
            stringify!(record_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sel_type) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(sel_event_record),
            "::",
            stringify!(sel_type)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ipmi_event_sensor_types {
    pub code: u8,
    pub offset: u8,
    pub data: u8,
    pub desc: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_ipmi_event_sensor_types() {
    const UNINIT: ::std::mem::MaybeUninit<ipmi_event_sensor_types> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ipmi_event_sensor_types>(),
        11usize,
        concat!("Size of: ", stringify!(ipmi_event_sensor_types))
    );
    assert_eq!(
        ::std::mem::align_of::<ipmi_event_sensor_types>(),
        1usize,
        concat!("Alignment of ", stringify!(ipmi_event_sensor_types))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).code) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_event_sensor_types),
            "::",
            stringify!(code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_event_sensor_types),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_event_sensor_types),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).desc) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(ipmi_event_sensor_types),
            "::",
            stringify!(desc)
        )
    );
}
extern "C" {
    pub fn ipmi_sel_main(
        arg1: *mut ipmi_intf,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ipmi_sel_print_std_entry(intf: *mut ipmi_intf, evt: *mut sel_event_record);
}
extern "C" {
    pub fn ipmi_sel_print_std_entry_verbose(intf: *mut ipmi_intf, evt: *mut sel_event_record);
}
extern "C" {
    pub fn ipmi_sel_print_extended_entry(intf: *mut ipmi_intf, evt: *mut sel_event_record);
}
extern "C" {
    pub fn ipmi_sel_print_extended_entry_verbose(intf: *mut ipmi_intf, evt: *mut sel_event_record);
}
extern "C" {
    pub fn ipmi_get_event_desc(
        intf: *mut ipmi_intf,
        rec: *mut sel_event_record,
        desc: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn ipmi_get_sensor_type(intf: *mut ipmi_intf, code: u8) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ipmi_sel_get_std_entry(intf: *mut ipmi_intf, id: u16, evt: *mut sel_event_record)
        -> u16;
}
extern "C" {
    pub fn ipmi_get_oem(intf: *mut ipmi_intf) -> IPMI_OEM;
}
extern "C" {
    pub fn ipmi_get_oem_desc(
        intf: *mut ipmi_intf,
        rec: *mut sel_event_record,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ipmi_sel_oem_init(filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ipmi_get_first_event_sensor_type(
        intf: *mut ipmi_intf,
        sensor_type: u8,
        event_type: u8,
    ) -> *const ipmi_event_sensor_types;
}
extern "C" {
    pub fn ipmi_get_next_event_sensor_type(
        evt: *const ipmi_event_sensor_types,
    ) -> *const ipmi_event_sensor_types;
}
extern "C" {
    pub fn ipmi_sensor_main(
        arg1: *mut ipmi_intf,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ipmi_sensor_print_fc(
        arg1: *mut ipmi_intf,
        arg2: *mut sdr_record_common_sensor,
        arg3: u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ipmi_sensor_get_sensor_reading_factors(
        intf: *mut ipmi_intf,
        sensor: *mut sdr_record_full_sensor,
        reading: u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ipmi_session_main(
        arg1: *mut ipmi_intf,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct sol_config_parameters {
    pub set_in_progress: u8,
    pub enabled: u8,
    pub force_encryption: u8,
    pub force_authentication: u8,
    pub privilege_level: u8,
    pub character_accumulate_level: u8,
    pub character_send_threshold: u8,
    pub retry_count: u8,
    pub retry_interval: u8,
    pub non_volatile_bit_rate: u8,
    pub volatile_bit_rate: u8,
    pub payload_channel: u8,
    pub payload_port: u16,
}
#[test]
fn bindgen_test_layout_sol_config_parameters() {
    const UNINIT: ::std::mem::MaybeUninit<sol_config_parameters> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sol_config_parameters>(),
        14usize,
        concat!("Size of: ", stringify!(sol_config_parameters))
    );
    assert_eq!(
        ::std::mem::align_of::<sol_config_parameters>(),
        1usize,
        concat!("Alignment of ", stringify!(sol_config_parameters))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).set_in_progress) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sol_config_parameters),
            "::",
            stringify!(set_in_progress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enabled) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(sol_config_parameters),
            "::",
            stringify!(enabled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).force_encryption) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sol_config_parameters),
            "::",
            stringify!(force_encryption)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).force_authentication) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(sol_config_parameters),
            "::",
            stringify!(force_authentication)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).privilege_level) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sol_config_parameters),
            "::",
            stringify!(privilege_level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).character_accumulate_level) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(sol_config_parameters),
            "::",
            stringify!(character_accumulate_level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).character_send_threshold) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(sol_config_parameters),
            "::",
            stringify!(character_send_threshold)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).retry_count) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(sol_config_parameters),
            "::",
            stringify!(retry_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).retry_interval) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sol_config_parameters),
            "::",
            stringify!(retry_interval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).non_volatile_bit_rate) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(sol_config_parameters),
            "::",
            stringify!(non_volatile_bit_rate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).volatile_bit_rate) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(sol_config_parameters),
            "::",
            stringify!(volatile_bit_rate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).payload_channel) as usize - ptr as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(sol_config_parameters),
            "::",
            stringify!(payload_channel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).payload_port) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sol_config_parameters),
            "::",
            stringify!(payload_port)
        )
    );
}
extern "C" {
    pub fn ipmi_sol_set_param_isvalid_uint8_t(
        strval: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
        minval: u8,
        maxval: u8,
        out_value: *mut u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ipmi_sol_main(
        arg1: *mut ipmi_intf,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ipmi_get_sol_info(
        intf: *mut ipmi_intf,
        channel: u8,
        params: *mut sol_config_parameters,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ipmi_sunoem_main(
        arg1: *mut ipmi_intf,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ipmi_tsol_main(
        arg1: *mut ipmi_intf,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ipmi_user_main(
        arg1: *mut ipmi_intf,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vita_discover(intf: *mut ipmi_intf) -> u8;
}
extern "C" {
    pub fn ipmi_vita_ipmb_address(intf: *mut ipmi_intf) -> u8;
}
extern "C" {
    pub fn ipmi_vita_main(
        intf: *mut ipmi_intf,
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
